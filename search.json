[{"path":"https://strengejacke.github.io/ggeffects/articles/content.html","id":"general-introductions-into-the-ggeffects-package","dir":"Articles","previous_headings":"","what":"General introductions into the ggeffects package","title":"Documentation of the ggeffects package","text":"Adjusted Predictions Regression Models Definition Marginal Effects Adjusted Predictions Specific Values Adjusted Predictions Random Effects Models Slopes, Contrasts Pairwise Comparisons Adding Partial Residuals Effects Plots","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/content.html","id":"creating-and-customizing-plots","dir":"Articles","previous_headings":"","what":"Creating and customizing plots","title":"Documentation of the ggeffects package","text":"Plotting Adjusted Predictions Customize Plot Appearance","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/content.html","id":"working-examples","dir":"Articles","previous_headings":"","what":"Working examples","title":"Documentation of the ggeffects package","text":"Logistic Mixed Effects Model Interaction Term (Cluster) Robust Standard Errors","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/content.html","id":"technical-details","dir":"Articles","previous_headings":"","what":"Technical details","title":"Documentation of the ggeffects package","text":"Difference ggpredict() ggemmeans() Different output Stata ggeffects","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/ggeffects.html","id":"aim-of-the-ggeffects-package","dir":"Articles","previous_headings":"","what":"Aim of the ggeffects-package","title":"ggeffects: Marginal Effects and Adjusted Predictions of Regression Models","text":"Results regression models typically presented tables easy understand. complex models include interaction quadratic / spline terms, tables numbers less helpful difficult interpret. cases, visualization marginal effects adjusted predictions far easier understand allows intuitively get idea predictors outcome associated, even complex models. ggeffects computes marginal effects adjusted predictions (estimated marginal means) mean (MEM) representative values (MER) predictors statistical models, .e. predictions generated model one holds non-focal variables constant varies focal variable(s). result returned data frame consistent structure, especially use ggplot. Definitions “marginal effects” can found . Since common language across fields regarding unique meaning “marginal effects”, recommended read vignette understand ggeffects actually , package differs packages calculate “marginal effects”. Since focus lies plotting data (marginal effects/adjusted predictions), least one model term needs specified effects computed. also possible compute marginal effects model terms, grouped levels another model’s predictor. package also allows plotting marginal effects two-, three- four-way-interactions, specific values model term . Examples shown .","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/ggeffects.html","id":"short-technical-note","dir":"Articles","previous_headings":"Aim of the ggeffects-package","what":"Short technical note","title":"ggeffects: Marginal Effects and Adjusted Predictions of Regression Models","text":"ggpredict(), ggemmeans() ggeffect() always return predicted values response model (response distribution Bayesian models). Typically, ggpredict() returns confidence intervals based standard errors returned predict()-function, assuming normal distribution (+/- 1.96 * SE). predict() certain class return standard errors (example, merMod-objects), calculated manually, following steps: matrix-multiply X parameter vector B get predictions, extract variance-covariance matrix V parameters compute XVX' get variance-covariance matrix predictions. square-root diagonal matrix represent standard errors predictions, multiplied 1.96 confidence intervals. mixed models, type = \"random\" type = \"zi_random\", uncertainty random effects accounted calculating standard errors. Hence, cases, intervals may considered prediction intervals.","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/ggeffects.html","id":"consistent-and-tidy-structure","dir":"Articles","previous_headings":"Aim of the ggeffects-package","what":"Consistent and tidy structure","title":"ggeffects: Marginal Effects and Adjusted Predictions of Regression Models","text":"returned data frames always , consistent structure column names, ’s easy create ggplot-plots without need re-write arguments mapped ggplot-call. x predicted values x- y-axis. conf.low conf.high used ymin ymax aesthetics ribbons add confidence bands plot. group can used grouping-aesthetics, faceting. examples shown mostly use ggplot2-code plots, however, also plot()-method, described vignette Plotting Marginal Effects.","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/ggeffects.html","id":"marginal-effects-at-the-mean","dir":"Articles","previous_headings":"","what":"Marginal effects at the mean","title":"ggeffects: Marginal Effects and Adjusted Predictions of Regression Models","text":"ggpredict() computes predicted values possible levels values model’s predictors. simplest case, fitted model passed first argument, term question second argument. Use raw name variable terms-argument - don’t need write things like poly(term, 3) (term^2) terms-argument. can see, ggpredict() (ggeffect() ggemmeans()) nice print()-method, takes care printing many rows (always equally spaced range values, including minimum maximum value term question) giving extra information. especially useful predicted values shown depending levels terms (see ). output shows predicted values response value term c12hour. data already shape ggplot:","code":"library(ggeffects) data(efc) fit <- lm(barthtot ~ c12hour + neg_c_7 + c161sex + c172code, data = efc)  ggpredict(fit, terms = \"c12hour\") #> # Predicted values of Total score BARTHEL INDEX #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>       0 |     75.44 | [73.25, 77.63] #>      20 |     70.38 | [68.56, 72.19] #>      45 |     64.05 | [62.39, 65.70] #>      65 |     58.98 | [57.15, 60.80] #>      85 |     53.91 | [51.71, 56.12] #>     105 |     48.85 | [46.14, 51.55] #>     125 |     43.78 | [40.51, 47.05] #>     170 |     32.38 | [27.73, 37.04] #>  #> Adjusted for: #> *  neg_c_7 = 11.84 #> *  c161sex =  1.76 #> * c172code =  1.97 library(ggplot2) theme_set(theme_bw())  mydf <- ggpredict(fit, terms = \"c12hour\") ggplot(mydf, aes(x, predicted)) + geom_line()"},{"path":"https://strengejacke.github.io/ggeffects/articles/ggeffects.html","id":"marginal-effects-at-the-mean-by-other-predictors-levels","dir":"Articles","previous_headings":"","what":"Marginal effects at the mean by other predictors’ levels","title":"ggeffects: Marginal Effects and Adjusted Predictions of Regression Models","text":"terms-argument accepts four model terms, second fourth terms indicate grouping levels. allows predictions term question different levels model terms: Creating ggplot pretty straightforward: colour-aesthetics mapped group-column:  second grouping structure can defined, create another column named facet, - name implies - might used create facted plot:  Finally, third differentation can defined, creating another column named panel. cases, may create multiple plots (value panel). ggeffects takes care use plot() automatically creates integrated plot panels one figure.","code":"ggpredict(fit, terms = c(\"c12hour\", \"c172code\")) #> # Predicted values of Total score BARTHEL INDEX #>  #> # c172code = low level of education #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>       0 |     74.75 | [71.26, 78.23] #>      30 |     67.15 | [64.03, 70.26] #>      55 |     60.81 | [57.77, 63.86] #>      85 |     53.22 | [49.95, 56.48] #>     115 |     45.62 | [41.86, 49.37] #>     170 |     31.69 | [26.59, 36.78] #>  #> # c172code = intermediate level of education #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>       0 |     75.46 | [73.28, 77.65] #>      30 |     67.87 | [66.16, 69.57] #>      55 |     61.53 | [59.82, 63.25] #>      85 |     53.93 | [51.72, 56.14] #>     115 |     46.34 | [43.35, 49.32] #>     170 |     32.40 | [27.74, 37.07] #>  #> # c172code = high level of education #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>       0 |     76.18 | [72.81, 79.55] #>      30 |     68.58 | [65.41, 71.76] #>      55 |     62.25 | [59.00, 65.50] #>      85 |     54.65 | [51.03, 58.27] #>     115 |     47.05 | [42.85, 51.26] #>     170 |     33.12 | [27.50, 38.74] #>  #> Adjusted for: #> * neg_c_7 = 11.84 #> * c161sex =  1.76 mydf <- ggpredict(fit, terms = c(\"c12hour\", \"c172code\")) ggplot(mydf, aes(x, predicted, colour = group)) + geom_line() mydf <- ggpredict(fit, terms = c(\"c12hour\", \"c172code\", \"c161sex\")) mydf #> # Predicted values of Total score BARTHEL INDEX #>  #> # c172code = low level of education #> #  c161sex = [1] Male #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>       0 |     73.95 | [69.35, 78.56] #>      45 |     62.56 | [58.22, 66.89] #>      85 |     52.42 | [47.89, 56.96] #>     170 |     30.89 | [24.84, 36.95] #>  #> # c172code = intermediate level of education #> #  c161sex = [1] Male #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>       0 |     74.67 | [71.05, 78.29] #>      45 |     63.27 | [59.88, 66.67] #>      85 |     53.14 | [49.39, 56.89] #>     170 |     31.61 | [25.97, 37.25] #>  #> # c172code = high level of education #> #  c161sex = [1] Male #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>       0 |     75.39 | [71.03, 79.75] #>      45 |     63.99 | [59.72, 68.26] #>      85 |     53.86 | [49.22, 58.50] #>     170 |     32.33 | [25.94, 38.72] #>  #> # c172code = low level of education #> #  c161sex = [2] Female #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>       0 |     75.00 | [71.40, 78.59] #>      45 |     63.60 | [60.45, 66.74] #>      85 |     53.46 | [50.12, 56.80] #>     170 |     31.93 | [26.82, 37.05] #>  #> # c172code = intermediate level of education #> #  c161sex = [2] Female #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>       0 |     75.71 | [73.31, 78.12] #>      45 |     64.32 | [62.41, 66.22] #>      85 |     54.18 | [51.81, 56.56] #>     170 |     32.65 | [27.94, 37.37] #>  #> # c172code = high level of education #> #  c161sex = [2] Female #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>       0 |     76.43 | [72.88, 79.98] #>      45 |     65.03 | [61.67, 68.39] #>      85 |     54.90 | [51.15, 58.65] #>     170 |     33.37 | [27.69, 39.05] #>  #> Adjusted for: #> * neg_c_7 = 11.84 ggplot(mydf, aes(x, predicted, colour = group)) +    geom_line() +    facet_wrap(~facet) mydf <- ggpredict(fit, terms = c(\"c12hour\", \"c172code\", \"c161sex\", \"neg_c_7\")) plot(mydf) + theme(legend.position = \"bottom\")"},{"path":"https://strengejacke.github.io/ggeffects/articles/ggeffects.html","id":"marginal-effects-for-each-model-term","dir":"Articles","previous_headings":"","what":"Marginal effects for each model term","title":"ggeffects: Marginal Effects and Adjusted Predictions of Regression Models","text":"term argument either missing NULL, marginal effects model term calculated. result returned list, can plotted manually (using plot() function).","code":"mydf <- ggpredict(fit) mydf #> $c12hour #> # Predicted values of Total score BARTHEL INDEX #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>       0 |     75.44 | [73.25, 77.63] #>      20 |     70.38 | [68.56, 72.19] #>      45 |     64.05 | [62.39, 65.70] #>      65 |     58.98 | [57.15, 60.80] #>      85 |     53.91 | [51.71, 56.12] #>     105 |     48.85 | [46.14, 51.55] #>     125 |     43.78 | [40.51, 47.05] #>     170 |     32.38 | [27.73, 37.04] #>  #> Adjusted for: #> *  neg_c_7 = 11.84 #> *  c161sex =  1.76 #> * c172code =  1.97 #>  #> $neg_c_7 #> # Predicted values of Total score BARTHEL INDEX #>  #> neg_c_7 | Predicted |         95% CI #> ------------------------------------ #>       6 |     78.17 | [75.10, 81.23] #>       8 |     73.57 | [71.20, 75.94] #>      12 |     64.38 | [62.73, 66.04] #>      14 |     59.79 | [57.88, 61.70] #>      16 |     55.19 | [52.72, 57.67] #>      20 |     46.00 | [42.04, 49.97] #>      22 |     41.41 | [36.63, 46.20] #>      28 |     27.63 | [20.30, 34.96] #>  #> Adjusted for: #> *  c12hour = 42.20 #> *  c161sex =  1.76 #> * c172code =  1.97 #>  #> $c161sex #> # Predicted values of Total score BARTHEL INDEX #>  #> c161sex | Predicted |         95% CI #> ------------------------------------ #>       1 |     63.96 | [60.57, 67.35] #>       2 |     65.00 | [63.11, 66.90] #>  #> Adjusted for: #> *  c12hour = 42.20 #> *  neg_c_7 = 11.84 #> * c172code =  1.97 #>  #> $c172code #> # Predicted values of Total score BARTHEL INDEX #>  #> c172code | Predicted |         95% CI #> ------------------------------------- #>        1 |     64.06 | [61.01, 67.11] #>        2 |     64.78 | [63.12, 66.43] #>        3 |     65.49 | [62.31, 68.68] #>  #> Adjusted for: #> * c12hour = 42.20 #> * neg_c_7 = 11.84 #> * c161sex =  1.76 #>  #> attr(,\"class\") #> [1] \"ggalleffects\" \"list\"         #> attr(,\"model.name\") #> [1] \"fit\""},{"path":"https://strengejacke.github.io/ggeffects/articles/ggeffects.html","id":"two-way-three-way--and-four-way-interactions","dir":"Articles","previous_headings":"","what":"Two-Way, Three-Way- and Four-Way-Interactions","title":"ggeffects: Marginal Effects and Adjusted Predictions of Regression Models","text":"plot marginal effects interaction terms, simply specify terms terms-argument.  Since terms-argument accepts four model terms, can also compute marginal effects 3-way-interaction 4-way-interaction. plot marginal effects three interaction terms, just like , specify three terms terms-argument.  4-way-interactions rather confusing print plot. plotting, multiple plots (level fourth interaction term) plotted remaining three interaction terms. can easily done using plot()-method.","code":"library(sjmisc) data(efc)  # make categorical efc$c161sex <- to_factor(efc$c161sex)  # fit model with interaction fit <- lm(neg_c_7 ~ c12hour + barthtot * c161sex, data = efc)  # select only levels 30, 50 and 70 from continuous variable Barthel-Index mydf <- ggpredict(fit, terms = c(\"barthtot [30,50,70]\", \"c161sex\")) ggplot(mydf, aes(x, predicted, colour = group)) + geom_line() # fit model with 3-way-interaction fit <- lm(neg_c_7 ~ c12hour * barthtot * c161sex, data = efc)  # select only levels 30, 50 and 70 from continuous variable Barthel-Index mydf <- ggpredict(fit, terms = c(\"c12hour\", \"barthtot [30,50,70]\", \"c161sex\"))  ggplot(mydf, aes(x, predicted, colour = group)) +    geom_line() +   facet_wrap(~facet) # fit model with 4-way-interaction fit <- lm(neg_c_7 ~ c12hour * barthtot * c161sex * c172code, data = efc)  # marginal effects for all 4 interaction terms pr <- ggpredict(fit, c(\"c12hour\", \"barthtot\", \"c161sex\", \"c172code\"))  # use plot() method, easier than own ggplot-code from scratch plot(pr) + theme(legend.position = \"bottom\")"},{"path":"https://strengejacke.github.io/ggeffects/articles/ggeffects.html","id":"polynomial-terms-and-splines","dir":"Articles","previous_headings":"","what":"Polynomial terms and splines","title":"ggeffects: Marginal Effects and Adjusted Predictions of Regression Models","text":"ggpredict() also works models polynomial terms splines. Following code reproduces plot ?splines::bs:","code":"library(splines) data(women)  fm1 <- lm(weight ~ bs(height, df = 5), data = women) dat <- ggpredict(fm1, \"height\")  ggplot(dat, aes(x, predicted)) +    geom_line() +   geom_point()"},{"path":"https://strengejacke.github.io/ggeffects/articles/ggeffects.html","id":"survival-models","dir":"Articles","previous_headings":"","what":"Survival models","title":"ggeffects: Marginal Effects and Adjusted Predictions of Regression Models","text":"ggpredict() also supports coxph-models survival-package able either plot risk-scores (default), probabilities survival (type = \"survival\") cumulative hazards (type = \"cumulative_hazard\"). Since probabilities survival cumulative hazards changing across time, time-variable automatically used x-axis cases, terms-argument needs two variables type = \"survival\" type = \"cumulative_hazard\".","code":"library(survival) data(\"lung2\") m <- coxph(Surv(time, status) ~ sex + age + ph.ecog, data = lung2)  # predicted risk-scores ggpredict(m, c(\"sex\", \"ph.ecog\")) #> # Predicted risk scores #>  #> # ph.ecog = good #>  #> sex    | Predicted |       95% CI #> --------------------------------- #> male   |      1.00 | [1.00, 1.00] #> female |      0.58 | [0.42, 0.81] #>  #> # ph.ecog = ok #>  #> sex    | Predicted |       95% CI #> --------------------------------- #> male   |      1.51 | [1.02, 2.23] #> female |      0.87 | [0.53, 1.43] #>  #> # ph.ecog = limited #>  #> sex    | Predicted |       95% CI #> --------------------------------- #> male   |      2.47 | [1.58, 3.86] #> female |      1.43 | [0.83, 2.45] #>  #> Adjusted for: #> * age = 62.42 # probability of survival ggpredict(m, c(\"sex\", \"ph.ecog\"), type = \"survival\") #> # Probability of Survival #>  #> #     sex = male #> # ph.ecog = good #>  #> time | Predicted |       95% CI #> ------------------------------- #>    1 |      1.00 | [1.00, 1.00] #>  180 |      0.78 | [0.69, 0.87] #>  276 |      0.65 | [0.54, 0.78] #> 1022 |      0.09 | [0.03, 0.26] #>  #> #     sex = female #> # ph.ecog = good #>  #> time | Predicted |       95% CI #> ------------------------------- #>    1 |      1.00 | [1.00, 1.00] #>  180 |      0.87 | [0.80, 0.93] #>  276 |      0.78 | [0.68, 0.88] #> 1022 |      0.24 | [0.11, 0.51] #>  #> #     sex = male #> # ph.ecog = limited #>  #> time | Predicted |       95% CI #> ------------------------------- #>    1 |      1.00 | [1.00, 1.00] #>  180 |      0.54 | [0.42, 0.70] #>  276 |      0.34 | [0.22, 0.52] #> 1022 |      0.00 | [0.00, 0.04] #>  #> #     sex = female #> # ph.ecog = limited #>  #> time | Predicted |       95% CI #> ------------------------------- #>    1 |      1.00 | [1.00, 1.00] #>  180 |      0.70 | [0.59, 0.83] #>  276 |      0.53 | [0.40, 0.71] #> 1022 |      0.03 | [0.00, 0.19] #>  #> #     sex = male #> # ph.ecog = ok #>  #> time | Predicted |       95% CI #> ------------------------------- #>    1 |      1.00 | [1.00, 1.00] #>  180 |      0.69 | [0.60, 0.79] #>  276 |      0.52 | [0.42, 0.64] #> 1022 |      0.02 | [0.01, 0.11] #>  #> #     sex = female #> # ph.ecog = ok #>  #> time | Predicted |       95% CI #> ------------------------------- #>    1 |      1.00 | [1.00, 1.00] #>  180 |      0.80 | [0.73, 0.88] #>  276 |      0.68 | [0.59, 0.79] #> 1022 |      0.12 | [0.04, 0.31] #>  #> Adjusted for: #> * age = 62.42"},{"path":"https://strengejacke.github.io/ggeffects/articles/ggeffects.html","id":"labelling-the-data","dir":"Articles","previous_headings":"","what":"Labelling the data","title":"ggeffects: Marginal Effects and Adjusted Predictions of Regression Models","text":"ggeffects makes use sjlabelled-package supports labelled data. data fitted models labelled, value variable label attributes usually copied model frame stored model object. ggeffects provides various getter-functions access labels, returned character vector can used ggplot’s lab()- scale_*()-functions. get_title() - generic title plot, based model family, like “predicted values” “predicted probabilities” get_x_title() - variable label first model term terms. get_y_title() - variable label response. get_legend_title() - variable label second model term terms. get_x_labels() - value labels first model term terms. get_legend_labels() - value labels second model term terms. data frame returned ggpredict(), ggemmeans() ggeffect() must used argument one function calls.","code":"get_x_title(mydf) #> [1] \"average number of hours of care per week\" get_y_title(mydf) #> [1] \"Negative impact with 7 items\"  ggplot(mydf, aes(x, predicted, colour = group)) +    geom_line() +   facet_wrap(~facet) +   labs(     x = get_x_title(mydf),     y = get_y_title(mydf),     colour = get_legend_title(mydf)   )"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons.html","id":"hypothesis-testing-for-categorical-predictors","dir":"Articles","previous_headings":"","what":"Hypothesis testing for categorical predictors","title":"Significance Testing of Differences Between Predictions: Slopes, Contrasts and Pairwise Comparisons","text":"reason compute adjusted predictions (estimated marginal means) help understanding relationship predictors outcome regression model. particular complex models, example, complex interaction terms, often easier understand associations looking adjusted predictions instead raw table regression coefficients. next step, often follows , see statistically significant differences. , example, differences groups, .e. levels categorical predictors whether trends differ significantly . ggeffects package provides function, hypothesis_test(), exactly : testing differences adjusted predictions statistical significance. usually called contrasts (pairwise) comparisons. vignette shows examples use hypothesis_test() function test wheter differences predictions statistically significant.","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons.html","id":"within-episode-do-levels-differ","dir":"Articles","previous_headings":"Hypothesis testing for categorical predictors","what":"Within episode, do levels differ?","title":"Significance Testing of Differences Between Predictions: Slopes, Contrasts and Pairwise Comparisons","text":"start toy example, linear model two categorical predictors. interaction involved now. display simple table regression coefficients, created model_parameters() parameters package.","code":"library(ggeffects) library(parameters) library(ggplot2)  set.seed(123) n <- 200 d <- data.frame(   outcome = rnorm(n),   grp = as.factor(sample(c(\"treatment\", \"control\"), n, TRUE)),   episode = as.factor(sample(1:3, n, TRUE)),   sex = as.factor(sample(c(\"female\", \"male\"), n, TRUE, prob = c(.4, .6))) ) model1 <- lm(outcome ~ grp + episode, data = d) model_parameters(model1) #> Parameter       | Coefficient |   SE |        95% CI | t(196) |     p #> --------------------------------------------------------------------- #> (Intercept)     |       -0.08 | 0.13 | [-0.33, 0.18] |  -0.60 | 0.552 #> grp [treatment] |       -0.17 | 0.13 | [-0.44, 0.09] |  -1.30 | 0.197 #> episode [2]     |        0.36 | 0.16 | [ 0.03, 0.68] |   2.18 | 0.031 #> episode [3]     |        0.10 | 0.16 | [-0.22, 0.42] |   0.62 | 0.538"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons.html","id":"predictions","dir":"Articles","previous_headings":"Hypothesis testing for categorical predictors > Within episode, do levels differ?","what":"Predictions","title":"Significance Testing of Differences Between Predictions: Slopes, Contrasts and Pairwise Comparisons","text":"Let us look adjusted predictions.  now see , instance, predicted outcome espisode = 2 0.28.","code":"mydf <- ggpredict(model1, \"episode\") mydf #> # Predicted values of outcome #>  #> episode | Predicted |        95% CI #> ----------------------------------- #> 1       |     -0.08 | [-0.33, 0.18] #> 2       |      0.28 | [ 0.02, 0.54] #> 3       |      0.02 | [-0.24, 0.28] #>  #> Adjusted for: #> * grp = control  plot(mydf)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons.html","id":"pairwise-comparisons","dir":"Articles","previous_headings":"Hypothesis testing for categorical predictors > Within episode, do levels differ?","what":"Pairwise comparisons","title":"Significance Testing of Differences Between Predictions: Slopes, Contrasts and Pairwise Comparisons","text":"now ask whether predicted outcome episode = 1 significantly different predicted outcome episode = 2.  , use hypothesis_test() function. function, like ggpredict(), accepts model object first argument, followed focal predictors interest, .e. variables model contrasts pairwise comparisons calculated. default, focal terms categorical, pairwise comparison performed. can specify hypothesis tests well, using test argument (defaults \"pairwise\", see ?hypothesis_test). now, go simpler example contrasts pairwise comparisons. quantity interest, contrast episode 1-2, see value -0.36, exactly difference predicted outcome episode = 1 (-0.08) episode = 2 (0.28). related p-value 0.031, indicating difference predicted values outcome two levels factor episode indeed statistically significant. simple example, contrasts episode = 2 episode = 3 episode = 1 equals coefficients regression table (applies p-values), coefficients refer difference related parameter episode reference level, episode = 1. avoid specifying arguments used call ggpredict() , can also pass objects returned ggpredict() directly hypothesis_test().","code":"hypothesis_test(model1, \"episode\") # argument `test` defaults to \"pairwise\" #> # Pairwise comparisons #>  #> episode | Contrast |         95% CI |     p #> ------------------------------------------- #> 1-2     |    -0.36 | [-0.68, -0.03] | 0.031 #> 1-3     |    -0.10 | [-0.42,  0.22] | 0.538 #> 2-3     |     0.26 | [-0.06,  0.58] | 0.112 pred <- ggpredict(model1, \"episode\") hypothesis_test(pred) #> # Pairwise comparisons #>  #> episode | Contrast |         95% CI |     p #> ------------------------------------------- #> 1-2     |    -0.36 | [-0.68, -0.03] | 0.031 #> 1-3     |    -0.10 | [-0.42,  0.22] | 0.538 #> 2-3     |     0.26 | [-0.06,  0.58] | 0.112"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons.html","id":"does-same-level-of-episode-differ-between-groups","dir":"Articles","previous_headings":"Hypothesis testing for categorical predictors","what":"Does same level of episode differ between groups?","title":"Significance Testing of Differences Between Predictions: Slopes, Contrasts and Pairwise Comparisons","text":"next example includes pairwise comparison interaction two categorical predictors.","code":"model2 <- lm(outcome ~ grp * episode, data = d) model_parameters(model2) #> Parameter                     | Coefficient |   SE |        95% CI | t(194) |     p #> ----------------------------------------------------------------------------------- #> (Intercept)                   |        0.03 | 0.15 | [-0.27, 0.33] |   0.18 | 0.853 #> grp [treatment]               |       -0.42 | 0.23 | [-0.88, 0.04] |  -1.80 | 0.074 #> episode [2]                   |        0.20 | 0.22 | [-0.23, 0.63] |   0.94 | 0.350 #> episode [3]                   |       -0.07 | 0.22 | [-0.51, 0.37] |  -0.32 | 0.750 #> grp [treatment] × episode [2] |        0.36 | 0.33 | [-0.29, 1.02] |   1.09 | 0.277 #> grp [treatment] × episode [3] |        0.37 | 0.32 | [-0.27, 1.00] |   1.14 | 0.254"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons.html","id":"predictions-1","dir":"Articles","previous_headings":"Hypothesis testing for categorical predictors > Does same level of episode differ between groups?","what":"Predictions","title":"Significance Testing of Differences Between Predictions: Slopes, Contrasts and Pairwise Comparisons","text":"First, look predicted values outcome combinations involved interaction term.","code":"mydf <- ggpredict(model2, c(\"episode\", \"grp\")) mydf #> # Predicted values of outcome #>  #> # grp = control #>  #> episode | Predicted |        95% CI #> ----------------------------------- #> 1       |      0.03 | [-0.27, 0.33] #> 2       |      0.23 | [-0.08, 0.54] #> 3       |     -0.04 | [-0.36, 0.28] #>  #> # grp = treatment #>  #> episode | Predicted |         95% CI #> ------------------------------------ #> 1       |     -0.39 | [-0.74, -0.04] #> 2       |      0.18 | [-0.18,  0.53] #> 3       |     -0.09 | [-0.39,  0.21]  plot(mydf)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons.html","id":"pairwise-comparisons-1","dir":"Articles","previous_headings":"Hypothesis testing for categorical predictors > Does same level of episode differ between groups?","what":"Pairwise comparisons","title":"Significance Testing of Differences Between Predictions: Slopes, Contrasts and Pairwise Comparisons","text":"now ask whether predicted outcome episode = 2 significantly different depending level grp? words, groups treatment control differ episode = 2?  , answer question, calculate pairwise comparisons, .e. comparison (test differences) combinations focal predictors. focal predictors ’re interested two variables used interaction. quantity interest, contrast groups treatment control episode = 2 0.06. find comparison row 8 output. can see, hypothesis_test() returns pairwise comparisons possible combinations factor levels focal variables. ’re interested specific comparison, directly formulate comparison test. achieve , first need create overview adjusted predictions, get ggpredict() hypothesis_test(test = NULL). output, row considered one coefficient interest. groups want include comparison rows two (grp = control episode = 2) five (grp = treatment episode = 2), “quantities interest” b2 b5. null hypothesis want test whether predictions equal, .e. test = \"b2 = b5\". can now calculate desired comparison directly: reason specific way specifying test argument hypothesis_test() small, convenient wrapper around predictions() slopes() great marginaleffects package. Thus, test just passed hypothesis argument functions.","code":"# we want \"episode = 2-2\" and \"grp = control-treatment\" hypothesis_test(model2, c(\"episode\", \"grp\")) #> # Pairwise comparisons #>  #> episode |                 grp | Contrast |         95% CI |     p #> ----------------------------------------------------------------- #> 1-2     |     control-control |    -0.20 | [-0.63,  0.23] | 0.350 #> 1-3     |     control-control |     0.07 | [-0.37,  0.51] | 0.750 #> 1-1     |   control-treatment |     0.42 | [-0.04,  0.88] | 0.074 #> 1-2     |   control-treatment |    -0.15 | [-0.61,  0.32] | 0.529 #> 1-3     |   control-treatment |     0.12 | [-0.30,  0.54] | 0.573 #> 2-3     |     control-control |     0.27 | [-0.17,  0.72] | 0.225 #> 2-1     |   control-treatment |     0.62 | [ 0.16,  1.09] | 0.009 #> 2-2     |   control-treatment |     0.06 | [-0.41,  0.52] | 0.816 #> 2-3     |   control-treatment |     0.32 | [-0.10,  0.75] | 0.137 #> 3-1     |   control-treatment |     0.35 | [-0.13,  0.82] | 0.150 #> 3-2     |   control-treatment |    -0.22 | [-0.70,  0.26] | 0.368 #> 3-3     |   control-treatment |     0.05 | [-0.39,  0.49] | 0.821 #> 1-2     | treatment-treatment |    -0.57 | [-1.06, -0.07] | 0.026 #> 1-3     | treatment-treatment |    -0.30 | [-0.76,  0.16] | 0.203 #> 2-3     | treatment-treatment |     0.27 | [-0.19,  0.73] | 0.254 # adjusted predictions, formatted table ggpredict(model2, c(\"episode\", \"grp\")) #> # Predicted values of outcome #>  #> # grp = control #>  #> episode | Predicted |        95% CI #> ----------------------------------- #> 1       |      0.03 | [-0.27, 0.33] #> 2       |      0.23 | [-0.08, 0.54] #> 3       |     -0.04 | [-0.36, 0.28] #>  #> # grp = treatment #>  #> episode | Predicted |         95% CI #> ------------------------------------ #> 1       |     -0.39 | [-0.74, -0.04] #> 2       |      0.18 | [-0.18,  0.53] #> 3       |     -0.09 | [-0.39,  0.21]  # adjusted predictions, compact table hypothesis_test(model2, c(\"episode\", \"grp\"), test = NULL) #> episode |       grp | Predicted |         95% CI |     p #> -------------------------------------------------------- #> 1       |   control |      0.03 | [-0.27,  0.33] | 0.853 #> 2       |   control |      0.23 | [-0.08,  0.54] | 0.139 #> 3       |   control |     -0.04 | [-0.36,  0.28] | 0.793 #> 1       | treatment |     -0.39 | [-0.74, -0.04] | 0.028 #> 2       | treatment |      0.18 | [-0.18,  0.53] | 0.328 #> 3       | treatment |     -0.09 | [-0.39,  0.21] | 0.540 # compute specific contrast directly hypothesis_test(model2, c(\"episode\", \"grp\"), test = \"b2 = b5\") #> Hypothesis | Contrast |        95% CI |     p #> --------------------------------------------- #> b2=b5      |     0.06 | [-0.41, 0.52] | 0.816 #>  #> Tested hypothesis: episode[2],grp[control] = episode[2],grp[treatment]"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons.html","id":"do-different-episode-levels-differ-between-groups","dir":"Articles","previous_headings":"Hypothesis testing for categorical predictors","what":"Do different episode levels differ between groups?","title":"Significance Testing of Differences Between Predictions: Slopes, Contrasts and Pairwise Comparisons","text":"can repeat steps shown test combination group levels differences.","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons.html","id":"pairwise-comparisons-2","dir":"Articles","previous_headings":"Hypothesis testing for categorical predictors > Do different episode levels differ between groups?","what":"Pairwise comparisons","title":"Significance Testing of Differences Between Predictions: Slopes, Contrasts and Pairwise Comparisons","text":"instance, now ask whether predicted outcome episode = 1 treatment group significantly different predicted outcome episode = 3 control group.  contrast interested episode = 1 treatment group episode = 3 control group. predicted values rows three four (c.f. table predicted values), thus test whether \"b4 = b3\". Another way produce pairwise comparison, can reduce table predicted values providing specific values levels terms argument: episode = 1 treatment group episode = 3 control group refer now rows two three, thus also can obtain desired comparison way:","code":"hypothesis_test(model2, c(\"episode\", \"grp\"), test = \"b4 = b3\") #> Hypothesis | Contrast |        95% CI |     p #> --------------------------------------------- #> b4=b3      |    -0.35 | [-0.82, 0.13] | 0.150 #>  #> Tested hypothesis: episode[1],grp[treatment] = episode[3],grp[control] ggpredict(model2, c(\"episode [1,3]\", \"grp\")) #> # Predicted values of outcome #>  #> # grp = control #>  #> episode | Predicted |        95% CI #> ----------------------------------- #> 1       |      0.03 | [-0.27, 0.33] #> 3       |     -0.04 | [-0.36, 0.28] #>  #> # grp = treatment #>  #> episode | Predicted |         95% CI #> ------------------------------------ #> 1       |     -0.39 | [-0.74, -0.04] #> 3       |     -0.09 | [-0.39,  0.21] pred <- ggpredict(model2, c(\"episode [1,3]\", \"grp\")) hypothesis_test(pred, test = \"b3 = b2\") #> Hypothesis | Contrast |        95% CI |     p #> --------------------------------------------- #> b3=b2      |    -0.35 | [-0.82, 0.13] | 0.150 #>  #> Tested hypothesis: episode[1],grp[treatment] = episode[3],grp[control]"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons.html","id":"does-difference-between-two-levels-of-episode-in-the-control-group-differ-from-difference-of-same-two-levels-in-the-treatment-group","dir":"Articles","previous_headings":"Hypothesis testing for categorical predictors","what":"Does difference between two levels of episode in the control group differ from difference of same two levels in the treatment group?","title":"Significance Testing of Differences Between Predictions: Slopes, Contrasts and Pairwise Comparisons","text":"test argument also allows us compare difference--differences. example, difference two episode levels one group significantly different difference two episode levels group?  reminder, look table predictions : first difference episode levels 1 2 control group refer rows one two table (b1 b2). difference episode levels treatment group refer difference rows four five (b4 b5). Thus, b1 - b2 b4 - b5, null hypothesis two differences equal: test = \"(b1 - b2) = (b4 - b5)\". Let’s replicate step--step: Predicted value outcome episode = 1 control group 0.03. Predicted value outcome episode = 2 control group 0.23. first difference -0.2 Predicted value outcome episode = 1 treatment group -0.39. Predicted value outcome episode = 2 treatment group 0.18. second difference -0.57 quantity interest difference two differences, 0.36. difference statistically significant (p = 0.277).","code":"hypothesis_test(model2, c(\"episode\", \"grp\"), test = NULL) #> episode |       grp | Predicted |         95% CI |     p #> -------------------------------------------------------- #> 1       |   control |      0.03 | [-0.27,  0.33] | 0.853 #> 2       |   control |      0.23 | [-0.08,  0.54] | 0.139 #> 3       |   control |     -0.04 | [-0.36,  0.28] | 0.793 #> 1       | treatment |     -0.39 | [-0.74, -0.04] | 0.028 #> 2       | treatment |      0.18 | [-0.18,  0.53] | 0.328 #> 3       | treatment |     -0.09 | [-0.39,  0.21] | 0.540 hypothesis_test(model2, c(\"episode\", \"grp\"), test = \"(b1 - b2) = (b4 - b5)\") #> Hypothesis      | Contrast |        95% CI |     p #> -------------------------------------------------- #> (b1-b2)=(b4-b5) |     0.36 | [-0.29, 1.02] | 0.277 #>  #> Tested hypothesis: (episode[1],grp[control] - episode[2],grp[control]) = (episode[1],grp[treatment] - episode[2],grp[treatment])"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons.html","id":"hypothesis-testing-for-slopes-of-numeric-predictors","dir":"Articles","previous_headings":"","what":"Hypothesis testing for slopes of numeric predictors","title":"Significance Testing of Differences Between Predictions: Slopes, Contrasts and Pairwise Comparisons","text":"numeric focal terms, possible conduct hypothesis testing slopes, linear trend focal terms. Let’s start simple example . can already see coefficient table slope Sepal.Length 0.35. thus find increase predicted values outcome focal variable, Sepal.Length increases one unit. Consequently, case simple slope, see result hypothesis test linar trend Sepal.Length:","code":"data(iris) m <- lm(Sepal.Width ~ Sepal.Length + Species, data = iris) model_parameters(m) #> Parameter            | Coefficient |   SE |         95% CI | t(146) |      p #> ---------------------------------------------------------------------------- #> (Intercept)          |        1.68 | 0.24 | [ 1.21,  2.14] |   7.12 | < .001 #> Sepal Length         |        0.35 | 0.05 | [ 0.26,  0.44] |   7.56 | < .001 #> Species [versicolor] |       -0.98 | 0.07 | [-1.13, -0.84] | -13.64 | < .001 #> Species [virginica]  |       -1.01 | 0.09 | [-1.19, -0.82] | -10.80 | < .001 ggpredict(m, \"Sepal.Length [4,5,6,7]\") #> # Predicted values of Sepal.Width #>  #> Sepal.Length | Predicted |       95% CI #> --------------------------------------- #>            4 |      3.08 | [2.95, 3.20] #>            5 |      3.43 | [3.35, 3.51] #>            6 |      3.78 | [3.65, 3.90] #>            7 |      4.13 | [3.93, 4.33] #>  #> Adjusted for: #> * Species = setosa hypothesis_test(m, \"Sepal.Length\") #> # Linear trend for Sepal.Length #>  #> Slope |       95% CI |      p #> ----------------------------- #> 0.35  | [0.26, 0.44] | < .001"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons.html","id":"is-the-linear-trend-of-sepal-length-significant-for-the-different-levels-of-species","dir":"Articles","previous_headings":"Hypothesis testing for slopes of numeric predictors","what":"Is the linear trend of Sepal.Length significant for the different levels of Species?","title":"Significance Testing of Differences Between Predictions: Slopes, Contrasts and Pairwise Comparisons","text":"Let’s move complex example interaction numeric categorical variable.","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons.html","id":"predictions-2","dir":"Articles","previous_headings":"Hypothesis testing for slopes of numeric predictors > Is the linear trend of Sepal.Length significant for the different levels of Species?","what":"Predictions","title":"Significance Testing of Differences Between Predictions: Slopes, Contrasts and Pairwise Comparisons","text":"","code":"m <- lm(Sepal.Width ~ Sepal.Length * Species, data = iris) pred <- ggpredict(m, c(\"Sepal.Length\", \"Species\")) plot(pred)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons.html","id":"slopes-by-group","dir":"Articles","previous_headings":"Hypothesis testing for slopes of numeric predictors > Is the linear trend of Sepal.Length significant for the different levels of Species?","what":"Slopes by group","title":"Significance Testing of Differences Between Predictions: Slopes, Contrasts and Pairwise Comparisons","text":"can see slope Sepal.Length different within group Species.  Since don’t want pairwise comparisons, set test = NULL. case, interaction terms included, linear trend (slope) numeric focal predictor, Sepal.Length, tested level Species. can see, three slopes significant, .e. “significant” linear trends.","code":"hypothesis_test(m, c(\"Sepal.Length\", \"Species\"), test = NULL) #> # Linear trend for Sepal.Length #>  #> Species    | Slope |       95% CI |      p #> ------------------------------------------ #> setosa     |  0.80 | [0.58, 1.02] | < .001 #> versicolor |  0.32 | [0.17, 0.47] | < .001 #> virginica  |  0.23 | [0.11, 0.35] | < .001"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons.html","id":"pairwise-comparisons-3","dir":"Articles","previous_headings":"Hypothesis testing for slopes of numeric predictors > Is the linear trend of Sepal.Length significant for the different levels of Species?","what":"Pairwise comparisons","title":"Significance Testing of Differences Between Predictions: Slopes, Contrasts and Pairwise Comparisons","text":"Next question whether linear trends differ significantly , .e. test differences slopes, pairwise comparison slopes. , use default test, \"pairwise\". linear trend Sepal.Length within setosa significantly different linear trend versicolor also virginica. difference slopes virginica versicolor statistically significant (p = 0.367).","code":"hypothesis_test(m, c(\"Sepal.Length\", \"Species\")) #> # Linear trend for Sepal.Length #>  #> Species              | Contrast |        95% CI |      p #> -------------------------------------------------------- #> setosa-versicolor    |     0.48 | [ 0.21, 0.74] | < .001 #> setosa-virginica     |     0.57 | [ 0.32, 0.82] | < .001 #> versicolor-virginica |     0.09 | [-0.10, 0.28] | 0.367"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons.html","id":"is-the-difference-linear-trends-of-sepal-length-in-between-two-groups-of-species-significantly-different-from-the-difference-of-two-linear-trends-between-two-other-groups","dir":"Articles","previous_headings":"Hypothesis testing for slopes of numeric predictors","what":"Is the difference linear trends of Sepal.Length in between two groups of Species significantly different from the difference of two linear trends between two other groups?","title":"Significance Testing of Differences Between Predictions: Slopes, Contrasts and Pairwise Comparisons","text":"Similar example categorical predictors, can also test difference--differences example. instance, difference slopes Sepal.Length setosa versicolor different slope-difference groups setosa vigninica? difference--differences ’re interested indicated purple arrow plot.  Let’s look different slopes separately first, .e. slopes Sepal.Length levels Species: first difference slopes ’re interested one setosa (0.8) versicolor (0.32), .e. b1 - b2 (=0.48). second difference levels setosa (0.8) virginica (0.23), b1 - b3 (=0.57). test null hypothesis (b1 - b2) = (b1 - b3). difference two differences -0.09 statistically significant (p = 0.367).","code":"hypothesis_test(m, c(\"Sepal.Length\", \"Species\"), test = NULL) #> # Linear trend for Sepal.Length #>  #> Species    | Slope |       95% CI |      p #> ------------------------------------------ #> setosa     |  0.80 | [0.58, 1.02] | < .001 #> versicolor |  0.32 | [0.17, 0.47] | < .001 #> virginica  |  0.23 | [0.11, 0.35] | < .001 hypothesis_test(m, c(\"Sepal.Length\", \"Species\"), test = \"(b1 - b2) = (b1 - b3)\") #> Hypothesis      | Contrast |        95% CI |     p #> -------------------------------------------------- #> (b1-b2)=(b1-b3) |    -0.09 | [-0.28, 0.10] | 0.367 #>  #> Tested hypothesis: (Species[setosa] - Species[versicolor]) = (Species[setosa] - Species[virginica])"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons.html","id":"is-the-linear-trend-of-sepal-length-significant-at-different-values-of-another-numeric-predictor","dir":"Articles","previous_headings":"Hypothesis testing for slopes of numeric predictors","what":"Is the linear trend of Sepal.Length significant at different values of another numeric predictor?","title":"Significance Testing of Differences Between Predictions: Slopes, Contrasts and Pairwise Comparisons","text":"last example interaction two numeric predictors. case interaction terms, adjusted predictions usually shown representative values. numeric variable specified second third interaction term, representative values (see values_at()) typically mean +/- SD. next example, Petal.Width second interaction term, thus see predicted values Sepal.Width (outcome) Petal.Length three different, representative values Petal.Width: Mean (1.2), 1 SD mean (1.96) 1 SD mean (0.44).","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons.html","id":"predictions-3","dir":"Articles","previous_headings":"Hypothesis testing for slopes of numeric predictors > Is the linear trend of Sepal.Length significant at different values of another numeric predictor?","what":"Predictions","title":"Significance Testing of Differences Between Predictions: Slopes, Contrasts and Pairwise Comparisons","text":"hypothesis_test(), three values (mean, +1 SD -1 SD) work way Petal.Width categorical predictor three levels. First, want see value Petal.Width slopes Petal.Length significant. pairwise comparison , hence set test = NULL.","code":"m <- lm(Sepal.Width ~ Petal.Length * Petal.Width, data = iris) pred <- ggpredict(m, c(\"Petal.Length\", \"Petal.Width\")) plot(pred) hypothesis_test(pred, test = NULL) #> # Linear trend for Petal.Length #>  #> Petal.Width | Slope |         95% CI |      p #> --------------------------------------------- #> 0.44        | -0.28 | [-0.39, -0.16] | < .001 #> 1.20        | -0.11 | [-0.23,  0.01] | 0.075  #> 1.96        |  0.06 | [-0.09,  0.20] | 0.438 # same as: # hypothesis_test(m, c(\"Petal.Length\", \"Petal.Width\"), test = NULL)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons.html","id":"pairwise-comparisons-4","dir":"Articles","previous_headings":"Hypothesis testing for slopes of numeric predictors > Is the linear trend of Sepal.Length significant at different values of another numeric predictor?","what":"Pairwise comparisons","title":"Significance Testing of Differences Between Predictions: Slopes, Contrasts and Pairwise Comparisons","text":"results pairwise comparison shown . tell us linear trends (slopes) significantly different , .e. slope green line significantly different slope red line, .","code":"hypothesis_test(pred) #> # Linear trend for Petal.Length #>  #> Petal.Width | Contrast |         95% CI |      p #> ------------------------------------------------ #> 0.44-1.2    |    -0.17 | [-0.21, -0.12] | < .001 #> 0.44-1.96   |    -0.33 | [-0.43, -0.24] | < .001 #> 1.2-1.96    |    -0.17 | [-0.21, -0.12] | < .001"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons.html","id":"contrasts-and-comparisons-for-glm---logistic-regression-example","dir":"Articles","previous_headings":"","what":"Contrasts and comparisons for GLM - logistic regression example","title":"Significance Testing of Differences Between Predictions: Slopes, Contrasts and Pairwise Comparisons","text":"Lastly, show example non-Gaussian models. GLM models (non-Gaussian) link-functions, ggpredict() always returns predcted values response scale. example, predicted values logistic regression models shown probabilities. Let’s look simple example Contrasts comparisons, however, default link scale. However, hypothesis_test() passes dot-arguments (...) functions marginaleffects. Thus, can use arguments marginaleffects::predictions() marginaleffects::slopes() hypothesis_test(), . transform contrasts comparisons back response scale, can use transform_post argument. numeric focal variables, slopes (linear trends) estimates, always presented response scale. transform_post argument allowed used cases. aware whether back-transformation use, affects resulting p-values. detailed overview transformations can found vignette.","code":"set.seed(1234) dat <- data.frame(   outcome = rbinom(n = 100, size = 1, prob = 0.35),   x1 = as.factor(sample(1:3, size = 100, TRUE, prob = c(0.5, 0.2, 0.3))),   x2 = rnorm(n = 100, mean = 10, sd = 7) )  m <- glm(outcome ~ x1 + x2, data = dat, family = binomial()) ggpredict(m, \"x1\") #> # Predicted probabilities of outcome #>  #> x1 | Predicted |       95% CI #> ----------------------------- #> 1  |      0.24 | [0.14, 0.39] #> 2  |      0.16 | [0.06, 0.37] #> 3  |      0.34 | [0.19, 0.54] #>  #> Adjusted for: #> * x2 = 10.29 p <- ggpredict(m, \"x1\") hypothesis_test(p) #> # Pairwise comparisons #>  #> x1  | Contrast |       95% CI |     p #> ------------------------------------- #> 1-2 |     0.63 | [0.32, 0.86] | 0.427 #> 1-3 |     0.38 | [0.18, 0.63] | 0.350 #> 2-3 |     0.27 | [0.09, 0.58] | 0.142 #>  #> Contrasts are presented on the link-scale. hypothesis_test(p, transform_post = \"exp\") #> # Pairwise comparisons #>  #> x1  | Contrast |       95% CI |     p #> ------------------------------------- #> 1-2 |     1.09 | [0.90, 1.32] | 0.397 #> 1-3 |     0.90 | [0.73, 1.12] | 0.359 #> 2-3 |     0.83 | [0.66, 1.05] | 0.119 #>  #> Contrasts are presented on the response-scale. hypothesis_test(m, \"x2\") #> # Linear trend for x2 #>  #> Slope |        95% CI |     p #> ----------------------------- #> -0.01 | [-0.02, 0.00] | 0.080 #>  #> Slopes are presented on the response-scale."},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Significance Testing of Differences Between Predictions: Slopes, Contrasts and Pairwise Comparisons","text":"Thanks great marginaleffects package, now possible powerful function ggeffects allows perform next logical step calculating adjusted predictions conduct hypothesis tests contrasts pairwise comparisons. current implementation hypothesis_test() already covers many common use cases testing contrasts pairwise comparison, still might need sophisticated comparisons. case, recommend using marginaleffects package directly. related recommended readings vignettes Comparisons Hypothesis Tests, Equivalence Tests, Custom Contrasts.","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_effectsatvalues.html","id":"adjusted-predictions-and-marginal-effects-at-specific-values-or-levels","dir":"Articles","previous_headings":"","what":"Adjusted predictions and marginal effects at specific values or levels","title":"Introduction: Adjusted Predictions and Marginal Effects at Specific Values","text":"vignettes shows calculate adjusted predictions specific values levels terms interest. recommended read general introduction first, haven’t done yet. terms-argument defines model terms (.e. focal variables) interest, model term can limited certain values. allows compute plot marginal effects (grouping) terms specific values , define values main effect interest. several options define values. terms specified character vector, values always placed square brackets directly term name can vary model term. alternative use named list terms argument, however, offer full range options define specific values. Concrete values separated comma: terms = \"c172code [1,3]\". factors, also use factor levels, e.g. terms = \"Species [setosa,versicolor]\". terms named list, specified like : terms = list(c172code = c(1, 3)) terms = list(c172code = c(1, 3), Species = c(\"setosa\", \"versicolor\")). Ranges specified colon: terms = c(\"c12hour [30:80]\", \"c172code [1,3]\"). plot values 30 80 variable c12hour. default, step size 1, .e. [1:4] create range 1, 2, 3, 4. can choose different step sizes , e.g. [1:4 =.5]. named list, terms = list(c12hour = 30:80) terms = list(c12hour = seq(1, 4, 0.5)). Convenient shortcuts calculate common values like mean +/- 1 SD (terms = \"c12hour [meansd]\"), quartiles (terms = \"c12hour [quart]\") minumum maximum values (terms = \"c12hour [minmax]\"). See values_at() different options. function name. function applied unique values indicated variable, e.g. terms = \"hp [exp]\". can also define functions, pass name terms-values, e.g. terms = \"hp [own_function]\". variable name. values variable used define terms-values, e.g. first, vector defined: v = c(1000, 2000, 3000) , terms = \"income [v]\". first variable specified terms numeric vector, specific values given, “pretty range” calculated (see pretty_range()), avoid memory allocation problems vectors many unique values. select values, use []-tag, e.g. terms = \"mpg []\". numeric vector specified second third variable term (.e. vector represents grouping structure), representative values (see values_at()) chosen, typically mean +/- SD. create pretty range smaller larger default range (.e. specific values given), use n-tag, e.g. terms = \"age [n=5]\" terms = \"age [n = 12]\". Larger values n return larger range predicted values. Especially useful plotting group levels random effects many levels, sample-option, e.g. terms = \"Subject [sample=9]\", sample nine values possible values variable Subject.","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_effectsatvalues.html","id":"specific-values-and-value-range","dir":"Articles","previous_headings":"Adjusted predictions and marginal effects at specific values or levels","what":"Specific values and value range","title":"Introduction: Adjusted Predictions and Marginal Effects at Specific Values","text":"variables , instance, log-transformed, ggeffects automatically back-transforms predictions original scale response predictors, making predictions directly interpretable. However, sometimes might useful define value ranges. situation, specify range terms-argument. default, step size range 1, like 50, 51, 52, .... need different step size, use =<stepsize> inside brackets, e.g. \"hp [50:60 =.5]\". create range 50 60, .5er steps.","code":"library(ggeffects) library(ggplot2) data(efc) fit <- lm(barthtot ~ c12hour + neg_c_7 + c161sex + c172code, data = efc)  mydf <- ggpredict(fit, terms = c(\"c12hour [30:80]\", \"c172code [1,3]\")) mydf #> # Predicted values of Total score BARTHEL INDEX #>  #> # c172code = low level of education #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>      30 |     67.15 | [64.03, 70.26] #>      38 |     65.12 | [62.05, 68.19] #>      47 |     62.84 | [59.80, 65.88] #>      55 |     60.81 | [57.77, 63.86] #>      63 |     58.79 | [55.72, 61.86] #>      80 |     54.48 | [51.28, 57.69] #>  #> # c172code = high level of education #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>      30 |     68.58 | [65.41, 71.76] #>      38 |     66.56 | [63.39, 69.73] #>      47 |     64.28 | [61.08, 67.48] #>      55 |     62.25 | [59.00, 65.50] #>      63 |     60.23 | [56.90, 63.55] #>      80 |     55.92 | [52.38, 59.46] #>  #> Adjusted for: #> * neg_c_7 = 11.84 #> * c161sex =  1.76 ggplot(mydf, aes(x, predicted, colour = group)) + geom_line() data(mtcars) mpg_model <- lm(mpg ~ log(hp), data = mtcars)  # x-values and predictions based on the full range of the original \"hp\"-values ggpredict(mpg_model, \"hp\") #> # Predicted values of mpg #>  #>  hp | Predicted |         95% CI #> -------------------------------- #>  50 |     30.53 | [27.84, 33.22] #>  85 |     24.82 | [23.21, 26.42] #> 120 |     21.11 | [19.91, 22.30] #> 155 |     18.35 | [17.11, 19.59] #> 195 |     15.88 | [14.36, 17.41] #> 230 |     14.10 | [12.29, 15.92] #> 265 |     12.58 | [10.48, 14.68] #> 335 |     10.06 | [ 7.45, 12.66]  # x-values and predictions based on \"hp\"-values ranging from 50 to 150 ggpredict(mpg_model, \"hp [50:150]\") #> # Predicted values of mpg #>  #>  hp | Predicted |         95% CI #> -------------------------------- #>  50 |     30.53 | [27.84, 33.22] #>  63 |     28.04 | [25.86, 30.23] #>  75 |     26.17 | [24.33, 28.00] #>  87 |     24.57 | [23.00, 26.13] #> 100 |     23.07 | [21.71, 24.43] #> 113 |     21.75 | [20.52, 22.99] #> 125 |     20.67 | [19.49, 21.84] #> 150 |     18.71 | [17.49, 19.92] # range for x-values with .5-steps ggpredict(mpg_model, \"hp [50:60 by=.5]\") #> # Predicted values of mpg #>  #>    hp | Predicted |         95% CI #> ---------------------------------- #> 50.00 |     30.53 | [27.84, 33.22] #> 51.50 |     30.21 | [27.59, 32.84] #> 52.50 |     30.01 | [27.42, 32.59] #> 53.50 |     29.80 | [27.26, 32.34] #> 55.00 |     29.50 | [27.02, 31.98] #> 56.50 |     29.22 | [26.79, 31.64] #> 57.50 |     29.03 | [26.64, 31.41] #> 60.00 |     28.57 | [26.28, 30.86]"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_effectsatvalues.html","id":"choosing-representative-values","dir":"Articles","previous_headings":"Adjusted predictions and marginal effects at specific values or levels","what":"Choosing representative values","title":"Introduction: Adjusted Predictions and Marginal Effects at Specific Values","text":"Especially situations two continuous variables interaction terms, “grouping” variable continuous, helpful select representative values grouping variable - else, predictions made many groups, longer helpful interpreting marginal effects. can use \"minmax\": minimum maximum values (lower upper bounds) variable used. \"meansd\": uses mean value well one standard deviation mean value. \"zeromax\": similar \"minmax\" option, however, 0 always used minimum value. may useful predictors don’t empirical zero-value. \"terciles\" calculates uses terciles (lower, middle upper), including minimum maximum value. \"quart2\" calculates uses terciles (lower, middle upper), excluding minimum maximum value. \"quart\" calculates uses quartiles (lower, median upper), including minimum maximum value. \"quart2\" calculates uses quartiles (lower, median upper), excluding minimum maximum value. \"fivenum\" calculates Tukey’s five-number-summary (minimum, lower-hinge, median, upper-hinge, maximum). \"\" takes values vector.","code":"data(efc) # short variable label, for plot attr(efc$c12hour, \"label\") <- \"hours of care\" fit <- lm(barthtot ~ c12hour * c161sex + neg_c_7, data = efc)  mydf <- ggpredict(fit, terms = c(\"c161sex\", \"c12hour [meansd]\")) plot(mydf) mydf <- ggpredict(fit, terms = c(\"c161sex\", \"c12hour [quart]\")) plot(mydf)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_effectsatvalues.html","id":"transforming-values-with-functions","dir":"Articles","previous_headings":"Adjusted predictions and marginal effects at specific values or levels","what":"Transforming values with functions","title":"Introduction: Adjusted Predictions and Marginal Effects at Specific Values","text":"brackets terms-argument also accept name valid function, (back-)transform predicted values. example, define custom function get original values focal predictor, multiplied 2.","code":"# x-values and predictions based on \"hp\"-values, multiplied by 2 hp_double <- function(x) 2 * x ggpredict(mpg_model, \"hp [hp_double]\") #> # Predicted values of mpg #>  #>  hp | Predicted |         95% CI #> -------------------------------- #> 104 |     22.65 | [21.34, 23.96] #> 132 |     20.08 | [18.91, 21.25] #> 186 |     16.39 | [14.94, 17.84] #> 210 |     15.08 | [13.43, 16.73] #> 226 |     14.29 | [12.51, 16.08] #> 300 |     11.24 | [ 8.88, 13.61] #> 410 |      7.88 | [ 4.81, 10.95] #> 670 |      2.59 | [-1.63,  6.82]"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_effectsatvalues.html","id":"using-values-from-a-variable-vector","dir":"Articles","previous_headings":"Adjusted predictions and marginal effects at specific values or levels","what":"Using values from a variable (vector)","title":"Introduction: Adjusted Predictions and Marginal Effects at Specific Values","text":"","code":"val <- c(100, 200, 300) ggpredict(mpg_model, \"hp [val]\") #> # Predicted values of mpg #>  #>  hp | Predicted |         95% CI #> -------------------------------- #> 100 |     23.07 | [21.71, 24.43] #> 200 |     15.61 | [14.04, 17.17] #> 300 |     11.24 | [ 8.88, 13.61]"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_effectsatvalues.html","id":"pretty-value-ranges","dir":"Articles","previous_headings":"Adjusted predictions and marginal effects at specific values or levels","what":"Pretty value ranges","title":"Introduction: Adjusted Predictions and Marginal Effects at Specific Values","text":"section intended show examples plotted output differs, depending value range used. transformations, like polynomial spline terms, also quadratic cubic terms, result many predicted values. situation, predictions models lead memory allocation problems. ggpredict() “prettifies” certain value ranges default, least model types (like mixed models). see difference “curvilinear” trend, use quadratic term standardized variable.","code":"library(sjmisc) library(sjlabelled) library(lme4) data(efc)  efc$c12hour <- std(efc$c12hour) efc$e15relat <- as_label(efc$e15relat)  m <- lmer(   barthtot ~ c12hour + I(c12hour^2) + neg_c_7 + c160age + c172code + (1 | e15relat),    data = efc )  me <- ggpredict(m, terms = \"c12hour\") plot(me)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_effectsatvalues.html","id":"turn-off-prettifying","dir":"Articles","previous_headings":"Adjusted predictions and marginal effects at specific values or levels > Pretty value ranges","what":"Turn off “prettifying”","title":"Introduction: Adjusted Predictions and Marginal Effects at Specific Values","text":"said , ggpredict() “prettifies” vector, resulting smaller set unique values. less memory consuming may needed especially complex models. can turn automatic “prettifying” adding \"\"-shortcut terms-argument.  results smooth plot, values term interest taken account.","code":"me <- ggpredict(m, terms = \"c12hour [all]\") plot(me)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_effectsatvalues.html","id":"using-different-ranges-for-prettifying","dir":"Articles","previous_headings":"Adjusted predictions and marginal effects at specific values or levels > Pretty value ranges","what":"Using different ranges for prettifying","title":"Introduction: Adjusted Predictions and Marginal Effects at Specific Values","text":"modify “prettifying”, add \"n\"-shortcut terms-argument. allows select feasible range values smaller (hence less memory consuming) \"terms = ... []\", still produces smoother plots default prettyfing.","code":"me <- ggpredict(m, terms = \"c12hour [n=2]\") plot(me) me <- ggpredict(m, terms = \"c12hour [n=10]\") plot(me)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_effectsatvalues.html","id":"marginal-effects-conditioned-on-specific-values-of-the-covariates","dir":"Articles","previous_headings":"Adjusted predictions and marginal effects at specific values or levels","what":"Marginal effects conditioned on specific values of the covariates","title":"Introduction: Adjusted Predictions and Marginal Effects at Specific Values","text":"default, typical-argument determines function applied covariates hold terms constant values. default, mean-value, options (like median mode) possible well. Use condition-argument define values covariates held constant. condition requires named vector, name indicating covariate.","code":"data(mtcars) mpg_model <- lm(mpg ~ log(hp) + disp, data = mtcars)  # \"disp\" is hold constant at its mean ggpredict(mpg_model, \"hp\") #> # Predicted values of mpg #>  #>  hp | Predicted |         95% CI #> -------------------------------- #>  50 |     25.84 | [21.86, 29.82] #>  85 |     22.70 | [20.67, 24.72] #> 120 |     20.65 | [19.55, 21.76] #> 155 |     19.13 | [17.91, 20.35] #> 195 |     17.77 | [15.91, 19.64] #> 230 |     16.79 | [14.36, 19.23] #> 265 |     15.95 | [13.00, 18.91] #> 335 |     14.56 | [10.73, 18.40] #>  #> Adjusted for: #> * disp = 230.72  # \"disp\" is hold constant at value 200 ggpredict(mpg_model, \"hp\", condition = c(disp = 200)) #> # Predicted values of mpg #>  #>  hp | Predicted |         95% CI #> -------------------------------- #>  50 |     26.53 | [22.91, 30.15] #>  85 |     23.38 | [21.66, 25.11] #> 120 |     21.34 | [20.27, 22.41] #> 155 |     19.82 | [18.34, 21.30] #> 195 |     18.46 | [16.25, 20.67] #> 230 |     17.48 | [14.68, 20.28] #> 265 |     16.64 | [13.31, 19.97] #> 335 |     15.25 | [11.03, 19.47]"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_effectsatvalues.html","id":"marginal-effects-for-each-level-of-random-effects","dir":"Articles","previous_headings":"Adjusted predictions and marginal effects at specific values or levels","what":"Marginal effects for each level of random effects","title":"Introduction: Adjusted Predictions and Marginal Effects at Specific Values","text":"Marginal effects can also calculated group level mixed models. Simply add name related random effects term terms-argument, set type = \"re\". following example, fit linear mixed model first simply plot marginal effetcs, conditioned random effects.  Changing type type = \"re\" still returns population-level predictions default. major difference type = \"fe\" type = \"re\" uncertainty variance parameters. leads larger confidence intervals marginal effects type = \"re\".  compute marginal effects grouping level, add related random term terms-argument. case, confidence intervals calculated, marginal effects conditioned group level random effects.  Marginal effects, conditioned random effects, can also calculated specific levels . Add related values brackets variable name terms-argument.  group factor many levels, can also take random sample possible levels plot marginal effects subsample group levels. , use term = \"<groupfactor> [sample=n]\".","code":"library(sjlabelled) library(lme4) data(efc) efc$e15relat <- as_label(efc$e15relat) m <- lmer(neg_c_7 ~ c12hour + c160age + c161sex + (1 | e15relat), data = efc) me <- ggpredict(m, terms = \"c12hour\") plot(me) me <- ggpredict(m, terms = \"c12hour\", type = \"re\") plot(me) me <- ggpredict(m, terms = c(\"c12hour\", \"e15relat\"), type = \"re\") plot(me) me <- ggpredict(m, terms = c(\"c12hour\", \"e15relat [child,sibling]\"), type = \"re\") plot(me) data(\"sleepstudy\") m <- lmer(Reaction ~ Days + (1 + Days | Subject), data = sleepstudy) me <- ggpredict(m, terms = c(\"Days\", \"Subject [sample=8]\"), type = \"re\") plot(me)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_marginal_effects.html","id":"marginal-effects-and-predictions","dir":"Articles","previous_headings":"","what":"Marginal effects and predictions","title":"Intoduction to Adjusted Predictions and Marginal Effects in R","text":"common language across fields regarding unique meaning “marginal effects”. Thus, wording throughout package may vary. generic description ggeffects , : ggeffects allows us interpret statistical model making predictions generated model one holds non-focal variables constant varies focal variable(s). following, examples shown make clear actually calculated returned package’s functions ggpredict(), ggemmeans() ggeffect(), differs functions software packages calculate marginal effects.","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_marginal_effects.html","id":"an-example-with-a-simple-linear-model","dir":"Articles","previous_headings":"Marginal effects and predictions","what":"An example with a simple linear model","title":"Intoduction to Adjusted Predictions and Marginal Effects in R","text":"First, fit s simple linear model look coefficient predictor, Sepal.Width. basic example, coefficient see slope regression line:  simple linear model, slope regression line always value predictor, Sepal.Width. can check generating predictions model. “Predictions” returned ggeffects essentially interpretations regression coefficients terms comparison. can compare much outcome (Sepal.Length) changes average, focal term (case: Sepal.Width) varies: example, average value Sepal.Length observations value , say, 2 Sepal.Width, compared observations 3 Sepal.Width? ggeffects returns predictions representative values focal term(s), hence see many predicted values (including confidence intervals) output different values focal term(s). now look differences two predicted values, see identical: Furthermore, difference predicted values differ 1 focal term (Sepal.Width), equals regression coefficient. interpretation regression coefficient can seen average difference outcome, “comparing two individuals differ one predictor [difference 1 Sepal.Width case], levels predictors.” (Gelman, Hill, Vehtari 2020, page 494). don’t predictors example, don’t go deeper details . Thus, association - effect - Sepal.Length Sepal.Width every value Sepal.Width. means, simple linear models, regression coefficient also marginal effect: marginal effect time average marginal effect, average, effect Sepal.Width Sepal.Length -0.2234: Sepal.Width changes 1, value Sepal.Length changes -0.2234 average.","code":"data(iris) model1 <- lm(Sepal.Length ~ Sepal.Width, data = iris) coef(model1)[\"Sepal.Width\"] #> Sepal.Width  #>  -0.2233611 library(ggplot2) ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length)) +    geom_point() +   geom_abline(intercept = coef(model1)[\"(Intercept)\"],                slope = coef(model1)[\"Sepal.Width\"]) library(ggeffects) pr <- ggpredict(model1, \"Sepal.Width\") pr #> # Predicted values of Sepal.Length #>  #> Sepal.Width | Predicted |       95% CI #> -------------------------------------- #>        2.00 |      6.08 | [5.73, 6.43] #>        2.20 |      6.03 | [5.74, 6.33] #>        2.60 |      5.95 | [5.75, 6.14] #>        3.00 |      5.86 | [5.72, 5.99] #>        3.20 |      5.81 | [5.67, 5.95] #>        3.40 |      5.77 | [5.60, 5.94] #>        3.80 |      5.68 | [5.41, 5.94] #>        4.40 |      5.54 | [5.11, 5.98] # Difference between predicted values for Sepal.Width = 2 and 3 pr <- ggpredict(model1, \"Sepal.Width [2,3]\") round(diff(pr$predicted), 4) #> [1] -0.2234  # Difference between predicted values for Sepal.Width = 3 and 4 pr <- ggpredict(model1, \"Sepal.Width [4,5]\") round(diff(pr$predicted), 4) #> [1] -0.2234 library(margins) margins(model1) #>  Sepal.Width #>      -0.2234"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_marginal_effects.html","id":"an-example-with-a-simple-logistic-regression-model","dir":"Articles","previous_headings":"Marginal effects and predictions","what":"An example with a simple logistic regression model","title":"Intoduction to Adjusted Predictions and Marginal Effects in R","text":"next example, simulate data logistic regression model. regression coefficient x (logit-scale) 2.641. However, logistic regression, “slope” constant across values x, non-linear transformations . becomes clearer looking predicted probabilities:  can see, differences case logistic regression models compared linear regression model: longer predicted average difference mean outcome, rather predicted probability outcome 1 given value x. Due non-linear transformation, slope differs different values x, thus, “marginal effect” “association” (terms probabilities) constant across values x. regression coefficient linear models already response scale, hence (average) marginal effect equals regression coefficient, different scales logistic regression models: coefficients shown summary() logit-scale (scale linear predictor); exponentiating coefficient (.e. exp(coef(model2))) returns odds ratio; predictions easy interpret terms probabilities, mentioned 1). First, let’s look average marginal effect x model: result indicates “contribution variable outcome scale”, .e. “change predicted probability outcome equals 1” (see vignettes margins package). average, unit-change x changes predicted probability outcome equals 1 15.4%. generally speaking: marginal effect represents difference (two) predictions (infinitesimal) change x (focal term). average marginal effect represents average slope predictor. words: average marginal effects one value per parameter (term), thus can considered “adjusted regression coefficient”, predicted values usually predict average outcome different values x - usually don’t just one coefficient latter case represents overall effect x. personally find less intuitive interpret average marginal effects, particular non-Gaussian models, harder understand average effect actually varying effects across range focal term. Instead, rather prefer look predictions different values focal term(s), ggeffects returns default: x = -2, predicted probability y = 1, estimated model, zero. x = 10, probability 100%. essence, ggpredict() returns, average marginal effects, rather predicted values different values x (possibly adjusted co-variates, also called non-focal terms). makes clear marginal effects require predictions: marginal effect difference two adjacent predicted values (close enough case non-linear relationship outcome focal variable).","code":"set.seed(123) y <- rbinom(300, 1, c(.3, .7)) x <- rnorm(300, 2) y_1 <- y == 1 x[y_1] <- x[y_1] + rnorm(sum(y_1), 3)  d <- data.frame(x, y) model2 <- glm(y ~ x, family = binomial(), data = d)  coef(model2)[\"x\"] #>        x  #> 2.640768 plot(ggpredict(model2, \"x [all]\"), ci = FALSE, add.data = TRUE) margins(model2) #>      x #>  0.154 ggpredict(model2, \"x\") #> # Predicted probabilities of y #>  #>  x | Predicted |       95% CI #> ----------------------------- #> -2 |      0.00 | [0.00, 0.00] #>  0 |      0.00 | [0.00, 0.00] #>  2 |      0.03 | [0.01, 0.07] #>  4 |      0.84 | [0.73, 0.91] #>  6 |      1.00 | [0.99, 1.00] #>  8 |      1.00 | [1.00, 1.00] #> 10 |      1.00 | [1.00, 1.00]"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_marginal_effects.html","id":"marginal-effects-average-marginal-effects-or-predictions","dir":"Articles","previous_headings":"","what":"Marginal effects, average marginal effects or predictions?","title":"Intoduction to Adjusted Predictions and Marginal Effects in R","text":"language used throughout package considers “marginal effects” adjusted predictions, .e. predicted values. Depending response scale, either predicted (mean) values, predicted probabilities, predicted (mean) count (count models) etc. Currently, ggeffects calculate average marginal effects. See last section summary different meanings definitions.","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_marginal_effects.html","id":"estimated-marginal-means","dir":"Articles","previous_headings":"Marginal effects, average marginal effects or predictions?","what":"Estimated marginal means","title":"Intoduction to Adjusted Predictions and Marginal Effects in R","text":"Sometimes, term estimated marginal means used well, commonly used software packages likes SPSS, also prominent R package, emmeans. difference, instance, simple means “estimated marginal” means? “marginal”? idea behind marginal effects, estimated marginal means, estimated (predicted) average outcome value adjusted remaining co-variates. shall demonstrate another linear model. first simulate fake data, want see income affects well-. dataset also includes variable health, use later. now fit linear model, look regression coefficients: can see average well-15.5 points higher people middle income groups compared lower income groups. People higher income even average 33.11 points higher well-people lower income. can fairly easy calculate predicted average well-summing intercept coefficient middle high income. ggpredict() (ggemmeans() ggeffect()) also : example, “marginal effects” (estimated marginal means) equal simple average values well-different income groups: However, may conclude well-depending income, also factors, health status. health confounder impacts association income wellbeing. Now see effect income well-less pronounced take health status account. “adjustment” confounding variables can accounted calculating marginal effects (estimated marginal means). predicted average values wellbeing now longer simple group means, due adjustment: difference simple “means” “estimated marginal means”. latter “adjusted” means, based model adjusts covariates confounders. Thus, predicted means “marginalized” (.e. averaged) levels covariates. meant ggeffects “making predictions generated model one holds non-focal variables constant”. However, different way hold non-focal terms constant, ggpredict() differs ggemmeans() ggeffect() (described detail vignette).","code":"set.seed(123) wellbeing <- runif(300, 0, 100) income <- rep(NA, 300) health <- runif(300, 30, 80) health[wellbeing < 50] <- health[wellbeing < 50] - rnorm(sum(wellbeing < 50), 30, sd = 10)  income[wellbeing < 25] <- sample(1:3, sum(wellbeing < 25), replace = TRUE, prob = c(.7, .2, .1)) income[wellbeing >= 25 & wellbeing < 50] <- sample(1:3, sum(wellbeing >= 25 & wellbeing < 50), replace = TRUE, prob = c(.5, .3, .2)) income[wellbeing >= 50 & wellbeing < 75] <- sample(1:3, sum(wellbeing >= 50 & wellbeing < 75), replace = TRUE, prob = c(.35, .35, .3)) income[wellbeing >= 75] <- sample(1:3, sum(wellbeing >= 75), replace = TRUE, prob = c(.1, .2, .7))  income <- factor(income) levels(income) <- c(\"low\", \"middle\", \"high\") d <- data.frame(income, wellbeing, health) library(parameters) model3 <- lm(wellbeing ~ income, data = d)  model_parameters(model3) #> Parameter       | Coefficient |   SE |         95% CI | t(297) |      p #> ----------------------------------------------------------------------- #> (Intercept)     |       35.45 | 2.16 | [31.20, 39.70] |  16.42 | < .001 #> income [middle] |       15.50 | 3.50 | [ 8.61, 22.38] |   4.43 | < .001 #> income [high]   |       33.11 | 3.30 | [26.61, 39.60] |  10.03 | < .001 ggpredict(model3, \"income\") #> # Predicted values of wellbeing #>  #> income | Predicted |         95% CI #> ----------------------------------- #> low    |     35.45 | [31.20, 39.70] #> middle |     50.95 | [45.52, 56.37] #> high   |     68.55 | [63.64, 73.47] aggregate(d$wellbeing, list(d$income), mean) #>   Group.1        x #> 1     low 35.44815 #> 2  middle 50.94551 #> 3    high 68.55464 model4 <- lm(wellbeing ~ income + health, data = d) compare_parameters(model3, model4) #> Parameter       |               model3 |               model4 #> ------------------------------------------------------------- #> (Intercept)     | 35.45 (31.20, 39.70) | 16.37 (11.08, 21.65) #> income (middle) | 15.50 ( 8.61, 22.38) | 11.41 ( 5.38, 17.45) #> income (high)   | 33.11 (26.61, 39.60) | 24.44 (18.54, 30.33) #> health          |                      |  0.58 ( 0.46,  0.69) #> ------------------------------------------------------------- #> Observations    |                  300 |                  300 ggpredict(model4, \"income\") #> # Predicted values of wellbeing #>  #> income | Predicted |         95% CI #> ----------------------------------- #> low    |     39.26 | [35.49, 43.02] #> middle |     50.67 | [45.96, 55.37] #> high   |     63.69 | [59.32, 68.06] #>  #> Adjusted for: #> * health = 39.52"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_marginal_effects.html","id":"an-example-with-logistic-regression","dir":"Articles","previous_headings":"Marginal effects, average marginal effects or predictions?","what":"An example with logistic regression","title":"Intoduction to Adjusted Predictions and Marginal Effects in R","text":"can demonstrate aspect “adjusted predictions” seen linear model, logistic regression models. Therefore, generate fake data . Looking proportions table, see many female persons smoking compared male persons: case, “estimated” “predicted” means averages, predicted probabilities. According table, probability female smoking 75%, ’s 20% male persons. get values predicted probabilities, run logistic regression model: reference category sex male, can estimate average marginal effects female persons using margins(): interpretation like stated : change predicted probability outcome equals 1 female persons 0.55, .e. 55%. exactly difference predicted probabilities male female persons. Looking age distribution sample, might conclude model produces biased estimates, therefor biased predictions. Remember high odds ratio model, shown . Now include age possible confounder model. can see, female persons much older male persons. Smoking also associated age less likely people smoke children younger teenagers. Adjusting age reveals probability smoking actually higher male persons, female.","code":"smoking <- data.frame(   sex = factor(c(\"male\", \"female\", \"female\", \"male\", \"female\", \"female\",                  \"male\", \"female\", \"female\", \"male\", \"male\", \"female\",                  \"female\"),                 levels = c(\"male\", \"female\")),   smoking = factor(c(\"no\", \"yes\", \"yes\", \"yes\", \"yes\", \"no\", \"no\", \"yes\",                      \"yes\", \"no\", \"no\", \"no\", \"yes\"),                     levels = c(\"no\", \"yes\")),   age = c(10, 45, 50, 40, 45, 12, 14, 55, 60, 10, 14, 50, 40) ) 100 * prop.table(table(smoking$sex, smoking$smoking), margin = 1) #>          #>          no yes #>   male   80  20 #>   female 25  75 model5 <- glm(smoking ~ sex, family = binomial(), data = smoking)  # Looking at the odds ratio for \"sex\" model_parameters(model5, exponentiate = TRUE) #> Parameter    | Odds Ratio |    SE |         95% CI |     z |     p #> ------------------------------------------------------------------ #> (Intercept)  |       0.25 |  0.28 | [0.01,   1.69] | -1.24 | 0.215 #> sex [female] |      12.00 | 16.61 | [1.03, 333.21] |  1.79 | 0.073  # Looking at the predicted probabilities for \"sex\" ggpredict(model5, \"sex\") #> # Predicted probabilities of smoking #>  #> sex    | Predicted |       95% CI #> --------------------------------- #> male   |      0.20 | [0.03, 0.69] #> female |      0.75 | [0.38, 0.94] margins(model5) #>  sexfemale #>       0.55 model6 <- glm(smoking ~ sex + age, family = binomial(), data = smoking)  # Looking at the odds ratio for \"sex\" compare_parameters(model5, model6, exponentiate = TRUE) #> Parameter    |               model5 |                  model6 #> ------------------------------------------------------------- #> (Intercept)  |  0.25 (0.03,   2.24) | 5.52e-03 (0.00,   2.98) #> sex (female) | 12.00 (0.80, 180.97) |     0.36 (0.00, 116.05) #> age          |                      |     1.18 (0.97,   1.45) #> ------------------------------------------------------------- #> Observations |                   13 |                      13  # Looking at the predicted probabilities for \"sex\" ggpredict(model6, \"sex\") #> # Predicted probabilities of smoking #>  #> sex    | Predicted |       95% CI #> --------------------------------- #> male   |      0.65 | [0.03, 0.99] #> female |      0.39 | [0.03, 0.94] #>  #> Adjusted for: #> * age = 34.23"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_marginal_effects.html","id":"conclusion-marginal-effects-conditional-effects-predictions","dir":"Articles","previous_headings":"","what":"Conclusion: Marginal effects, conditional effects, predictions…","title":"Intoduction to Adjusted Predictions and Marginal Effects in R","text":"ggpredict() holds non-focal terms constant mean value (continuous) reference level (factors). Thus, effects returned ggpredict() actually conditional effects (.e. conditioned certain (reference) levels factors). However, ggeffect() ggemmeans() return marginal effects, since effects “marginalized” (“averaged”) levels factors. short: ggpredict(), ggemmeans() ggeffect() help answer question: expect outcome x = 1 (specific value level)? marginal effects help answer question: effect 1 unit change x y? average marginal effects help answer question: average effect 1 unit change x y? Marginal effects measure association change predictors change outcome. effect, prediction. change, level. Adjusted predictions measure average value outcome specific values levels predictors. impression many different terms: conditional marginal effects, marginal effects (estimated) marginal means, effects predictions, … point, still definitely clear wording appropriate ggeffects. : Whenever “marginal effects” mentioned , model-based predictions different values levels focal variable(s), holding non-focal variables constant mean, reference level averaged factor levels. linear models, adjusted predictions marginal effects . non-Gaussian models, strictly speaking (usually defined econometrics), “marginal effects” estimated marginal means conditional effects adjusted predictions predicted values. However, ’m revising wording package documentation vignettes, avoid term “marginal effects” good possible…","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_marginal_effects.html","id":"further-readings","dir":"Articles","previous_headings":"","what":"Further readings","title":"Intoduction to Adjusted Predictions and Marginal Effects in R","text":"great R package published late 2021, marginaleffects. related website provides definitions following four quantities package can compute, definitely worth reading, many great articles: marginaleffects package R.","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_marginal_effects.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Intoduction to Adjusted Predictions and Marginal Effects in R","text":"Gelman , Hill J, Vehtari (2020): “Regression Stories”. Cambridge.","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_partial_residuals.html","id":"detecting-non-linear-relationship","dir":"Articles","previous_headings":"","what":"Detecting non-linear relationship","title":"Introduction: Adding Partial Residuals to Marginal Effects Plots","text":"Let’s look example non-linear relationship. missed pattern obvious looking raw data:  However, becomes obvious partial residuals:  even obvious, local polynomial regression line (loess) added plot. can achieved using residuals.line = TRUE.","code":"library(ggeffects) set.seed(1234) x <- rnorm(200) z <- rnorm(200) # quadratic relationship y <- 2 * x + x^2 + 4 * z + rnorm(200)  d <- data.frame(x, y, z) m <- lm(y ~ x + z, data = d)  pr <- ggpredict(m, \"x [all]\") plot(pr, add.data = TRUE) plot(pr, residuals = TRUE) plot(pr, residuals = TRUE, residuals.line = TRUE)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_partial_residuals.html","id":"detecting-missed-interactions","dir":"Articles","previous_headings":"","what":"Detecting missed interactions","title":"Introduction: Adding Partial Residuals to Marginal Effects Plots","text":"another example, shows partial residuals plot suggests modeling interaction:  , recommended add loess-fit line residuals:  Modeling interaction clearly catches pattern data better.","code":"set.seed(1234) x <- rnorm(300, mean = 10) z <- rnorm(300) v <- rnorm(300) y <- (4 * z + 2) * x - 40 * z + 5 * v + rnorm(300, sd = 3)  d <- data.frame(x, y, z) m <- lm(y ~ x + z, data = d)  pr <- ggpredict(m, c(\"x\", \"z\"))  # raw data, no interaction plot(pr, add.data = TRUE) plot(pr, residuals = TRUE, grid = TRUE, residuals.line = TRUE) m <- lm(y ~ x * z, data = d) pr <- ggpredict(m, c(\"x\", \"z\")) plot(pr, residuals = TRUE, grid = TRUE, residuals.line = TRUE)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_partial_residuals.html","id":"using-the-complete-range-of-values","dir":"Articles","previous_headings":"","what":"Using the complete range of values","title":"Introduction: Adding Partial Residuals to Marginal Effects Plots","text":"ggeffects usually “prettyfies” data tries find pretty sequence range focal predictor, avoid lengthy output, particularly continuous variables (see section pretty value ranges vignette). , however, might misleading cases creating residual plots. next example, sinus-curve pattern residuals, hidden default:  cases, recommended use -tag terms-argument.","code":"set.seed(1234) x <- seq(-100, 100, length.out = 1e3) z <- rnorm(1e3) y <- 5 * sin(x / 2) + x / 2 + 10 * z  m <- lm(y ~ x + z) pr <- ggpredict(m, \"x\")  plot(pr, residuals = TRUE) pr <- ggpredict(m, \"x [all]\") plot(pr, residuals = TRUE)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_partial_residuals.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Introduction: Adding Partial Residuals to Marginal Effects Plots","text":"Fox J, Weisberg S. Visualizing Fit Lack Fit Complex Regression Models Predictor Effect Plots Partial Residuals. Journal Statistical Software 2018;87. https://www.jstatsoft.org/article/view/v087i09","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotcustomize.html","id":"changing-plot-and-axis-titles","dir":"Articles","previous_headings":"","what":"Changing Plot and Axis Titles","title":"Introduction: Customize Plot Appearance","text":"simplest thing change titles plot, x- y-axis. can done ggplot2::labs():","code":"plot(dat) +    labs(     x = \"Number of forward gears\",      y = \"Miles/(US) gallon\",      title = \"Predicted mean miles per gallon\"   )"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotcustomize.html","id":"changing-the-legend-title","dir":"Articles","previous_headings":"","what":"Changing the Legend Title","title":"Introduction: Customize Plot Appearance","text":"legend-title can also changed using labs()-function. legend ggplot-objects refers aesthetic used grouping variable, default colour, .e. plot constructed following way:","code":"ggplot(data, aes(x = x, y = predicted, colour = group))"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotcustomize.html","id":"plots-with-default-colors","dir":"Articles","previous_headings":"Changing the Legend Title","what":"Plots with Default Colors","title":"Introduction: Customize Plot Appearance","text":"Hence, using colour labs() changes legend-title:","code":"plot(dat) + labs(colour = \"Weight (1000 lbs)\")"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotcustomize.html","id":"black-and-white-plots","dir":"Articles","previous_headings":"Changing the Legend Title","what":"Black-and-White Plots","title":"Introduction: Customize Plot Appearance","text":"black--white plots, group-aesthetic mapped different linetypes, different colours. Thus, legend-title black--white plots can changed using linetype labs():","code":"plot(dat, colors = \"bw\") + labs(linetype = \"Weight (1000 lbs)\")"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotcustomize.html","id":"black-and-white-plots-with-categorical-predictor","dir":"Articles","previous_headings":"Changing the Legend Title","what":"Black-and-White Plots with Categorical Predictor","title":"Introduction: Customize Plot Appearance","text":"variable x-axis discrete black--white plot, group-aesthetic mapped different shapes, following code must used change legend title:","code":"plot(dat_categorical, colors = \"bw\") + labs(shape = \"Weight (1000 lbs)\")"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotcustomize.html","id":"changing-the-x-axis-appearance","dir":"Articles","previous_headings":"","what":"Changing the x-Axis Appearance","title":"Introduction: Customize Plot Appearance","text":"x-axis plots returned plot() always continuous, even discrete x-axis-variables. reason many users used plots connect data points lines, possible continuous x-axes. can using connect.lines-argument:","code":"plot(dat_categorical, connect.lines = TRUE)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotcustomize.html","id":"categorical-predictors","dir":"Articles","previous_headings":"Changing the x-Axis Appearance","what":"Categorical Predictors","title":"Introduction: Customize Plot Appearance","text":"Since x-axis continuous (.e. ggplot2::scale_x_continuous()), can use scale_x_continuous() modify x-axis, change breaks, limits labels.","code":"plot(dat_categorical) +    scale_x_continuous(labels = c(\"four\", \"six\", \"eight\"), breaks = c(4, 6, 8))"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotcustomize.html","id":"continuous-predictors","dir":"Articles","previous_headings":"Changing the x-Axis Appearance","what":"Continuous Predictors","title":"Introduction: Customize Plot Appearance","text":"continuous variables:","code":"plot(dat) + scale_x_continuous(breaks = 3:5, limits = c(2, 6))"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotcustomize.html","id":"changing-the-y-axis-appearance","dir":"Articles","previous_headings":"","what":"Changing the y-Axis Appearance","title":"Introduction: Customize Plot Appearance","text":"Arguments ... passed ggplot::scale_y_continuous() (resp. ggplot::scale_y_log10(), log.y = TRUE), can control appearance y-axis putting arguments directly call plot():","code":"plot(dat_categorical, breaks = seq(12, 30, 2), limits = c(12, 30))"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotcustomize.html","id":"changing-the-legend-labels","dir":"Articles","previous_headings":"","what":"Changing the Legend Labels","title":"Introduction: Customize Plot Appearance","text":"legend labels can also changed using scale_*()-function ggplot. Depending color-setting (see section Changing Legend Title), following functions can used change legend labels: scale_colour_manual() resp. scale_colour_brewer() scale_linetype_manual() scale_shape_manual() Since overwrite exising “color” scale, typically need provide values palette-argument, manuall set colors, linetypes shapes.","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotcustomize.html","id":"plots-with-default-colors-1","dir":"Articles","previous_headings":"Changing the Legend Labels","what":"Plots with Default Colors","title":"Introduction: Customize Plot Appearance","text":"plots using default colors:","code":"plot(dat) +    scale_colour_brewer(palette = \"Set1\", labels = c(\"-1 SD\", \"Mean\", \"+1 SD\"))"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotcustomize.html","id":"black-and-white-plots-1","dir":"Articles","previous_headings":"Changing the Legend Labels","what":"Black-and-White Plots","title":"Introduction: Customize Plot Appearance","text":"black--white plots:","code":"plot(dat, colors = \"bw\") +    scale_linetype_manual(values = 15:17, labels = c(\"-1 SD\", \"Mean\", \"+1 SD\"))"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotcustomize.html","id":"black-and-white-plots-with-categorical-predictor-1","dir":"Articles","previous_headings":"Changing the Legend Labels","what":"Black-and-White Plots with Categorical Predictor","title":"Introduction: Customize Plot Appearance","text":"black--white plots categorical x-axis:","code":"plot(dat_categorical, colors = \"bw\") +    scale_shape_manual(values = 1:3, labels = c(\"-1 SD\", \"Mean\", \"+1 SD\"))"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"plot-method","dir":"Articles","previous_headings":"","what":"plot()-method","title":"Introduction: Plotting Adjusted Predictions and Marginal Effects","text":"vignettes demonstrates plot()-method ggeffects-package. recommended read general introduction first, haven’t done yet. don’t want write ggplot-code, ggeffects plot()-method convenient defaults, allows quickly creating ggplot-objects. plot() arguments tweak plot-appearance. instance, ci allows show hide confidence bands (error bars, discrete variables), facets allows create facets even just one grouping variable, colors allows quickly choose color-palettes, including black & white colored plots. Use add.data add raw data points plot. ggeffects supports labelled data plot()-method automatically sets titles, axis - legend-labels depending value variable labels data.","code":"library(ggeffects) library(sjmisc) data(efc) efc$c172code <- to_label(efc$c172code) fit <- lm(barthtot ~ c12hour + neg_c_7 + c161sex + c172code, data = efc)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"facet-by-group","dir":"Articles","previous_headings":"plot()-method","what":"Facet by Group","title":"Introduction: Plotting Adjusted Predictions and Marginal Effects","text":"","code":"dat <- ggpredict(fit, terms = c(\"c12hour\", \"c172code\")) plot(dat, facet = TRUE)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"no-facets-in-black-white","dir":"Articles","previous_headings":"plot()-method","what":"No Facets, in Black & White","title":"Introduction: Plotting Adjusted Predictions and Marginal Effects","text":"","code":"# don't use facets, b/w figure, w/o confidence bands plot(dat, colors = \"bw\", ci = FALSE)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"add-data-points-to-plot","dir":"Articles","previous_headings":"plot()-method","what":"Add Data Points to Plot","title":"Introduction: Plotting Adjusted Predictions and Marginal Effects","text":"","code":"dat <- ggpredict(fit, terms = c(\"c12hour\", \"c172code\")) plot(dat, add.data = TRUE)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"automatic-facetting","dir":"Articles","previous_headings":"plot()-method","what":"Automatic Facetting","title":"Introduction: Plotting Adjusted Predictions and Marginal Effects","text":"","code":"# for three variables, automatic facetting dat <- ggpredict(fit, terms = c(\"c12hour\", \"c172code\", \"c161sex\")) plot(dat)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"automatic-selection-of-error-bars-or-confidence-bands","dir":"Articles","previous_headings":"plot()-method","what":"Automatic Selection of Error Bars or Confidence Bands","title":"Introduction: Plotting Adjusted Predictions and Marginal Effects","text":"","code":"# categorical variables have errorbars dat <- ggpredict(fit, terms = c(\"c172code\", \"c161sex\")) plot(dat)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"connect-discrete-data-points-with-lines","dir":"Articles","previous_headings":"plot()-method","what":"Connect Discrete Data Points with Lines","title":"Introduction: Plotting Adjusted Predictions and Marginal Effects","text":"","code":"# point-geoms for discrete x-axis can be connected with lines plot(dat, connect.lines = TRUE)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"create-panel-plots-for-more-than-three-terms","dir":"Articles","previous_headings":"plot()-method","what":"Create Panel Plots for more than three Terms","title":"Introduction: Plotting Adjusted Predictions and Marginal Effects","text":"three grouping variable (.e. terms length four), one plot per panel (values fourth variable terms) created, single, integrated plot produced default. Use one.plot = FALSE return one plot per panel.","code":"# for four variables, automatic facetting and integrated panel dat <- ggpredict(fit, terms = c(\"c12hour\", \"c172code\", \"c161sex\", \"neg_c_7\")) # use 'one.plot = FALSE' for returning multiple single plots plot(dat, one.plot = TRUE)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"change-appearance-of-confidence-bands","dir":"Articles","previous_headings":"","what":"Change appearance of confidence bands","title":"Introduction: Plotting Adjusted Predictions and Marginal Effects","text":"plots, confidence bands represented shaded area (ribbons), rather error bars (line), dashed dotted lines. Use ci.style = \"errorbar\", ci.style = \"dash\" ci.style = \"dot\" change style confidence bands.","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"dashed-lines-for-confidence-intervals","dir":"Articles","previous_headings":"Change appearance of confidence bands","what":"Dashed Lines for Confidence Intervals","title":"Introduction: Plotting Adjusted Predictions and Marginal Effects","text":"","code":"# dashed lines for CI dat <- ggpredict(fit, terms = \"c12hour\") plot(dat, ci.style = \"dash\")"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"error-bars-for-continuous-variables","dir":"Articles","previous_headings":"Change appearance of confidence bands","what":"Error Bars for Continuous Variables","title":"Introduction: Plotting Adjusted Predictions and Marginal Effects","text":"","code":"# facet by group dat <- ggpredict(fit, terms = c(\"c12hour\", \"c172code\")) plot(dat, facet = TRUE, ci.style = \"errorbar\", dot.size = 1.5)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"dotted-error-bars","dir":"Articles","previous_headings":"Change appearance of confidence bands","what":"Dotted Error Bars","title":"Introduction: Plotting Adjusted Predictions and Marginal Effects","text":"style error bars plots categorical x-axis can also changed. default, “error bars”, ci.style = \"dot\" ci.style = \"dashed\" works well","code":"dat <- ggpredict(fit, terms = \"c172code\") plot(dat, ci.style = \"dot\")"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"log-transform-y-axis-for-binomial-models","dir":"Articles","previous_headings":"","what":"Log-transform y-axis for binomial models","title":"Introduction: Plotting Adjusted Predictions and Marginal Effects","text":"binomial models, y-axis indicates predicted probabilities event. case, error bars symmetrical.  can use log.y log-transform y-axis. plot()-method automatically choose axis breaks limits fit well value range log-scale.","code":"library(\"lme4\") m <- glm(   cbind(incidence, size - incidence) ~ period,    family = binomial,    data = lme4::cbpp )  dat <- ggpredict(m, \"period\")  # normal plot, asymmetrical error bars plot(dat) # plot with log-transformed y-axis plot(dat, log.y = TRUE)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"control-y-axis-appearance","dir":"Articles","previous_headings":"","what":"Control y-axis appearance","title":"Introduction: Plotting Adjusted Predictions and Marginal Effects","text":"Furthermore, arguments ... passed ggplot::scale_y_continuous() (resp. ggplot::scale_y_log10(), log.y = TRUE), can control appearance y-axis.","code":"# plot with log-transformed y-axis, modify breaks plot(   dat, log.y = TRUE,    breaks = c(.05, .1, .15, .2, .25, .3),   limits = c(.01, .3) )"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"survival-models","dir":"Articles","previous_headings":"","what":"Survival models","title":"Introduction: Plotting Adjusted Predictions and Marginal Effects","text":"ggpredict() also supports coxph-models survival-package able either plot risk-scores (default), probabilities survival (type = \"surv\") cumulative hazards (type = \"cumhaz\"). Since probabilities survival cumulative hazards changing across time, time-variable automatically used x-axis cases, terms-argument needs two variables.","code":"library(survival) data(\"lung2\") m <- coxph(Surv(time, status) ~ sex + age + ph.ecog, data = lung2)  # predicted risk-scores pr <- ggpredict(m, c(\"sex\", \"ph.ecog\")) plot(pr) # probability of survival pr <- ggpredict(m, c(\"sex\", \"ph.ecog\"), type = \"survival\") plot(pr) # cumulative hazards pr <- ggpredict(m, c(\"sex\", \"ph.ecog\"), type = \"cumulative_hazard\") plot(pr)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"custom-color-palettes","dir":"Articles","previous_headings":"","what":"Custom color palettes","title":"Introduction: Plotting Adjusted Predictions and Marginal Effects","text":"ggeffects-package pre-defined color-palettes can used colors-argument. Use show_pals() see available palettes.  two examples showing use pre-defined colors:","code":"show_pals() dat <- ggpredict(fit, terms = c(\"c12hour\", \"c172code\")) plot(dat, facet = TRUE, colors = \"circus\") dat <- ggpredict(fit, terms = c(\"c172code\", \"c12hour [quart]\")) plot(dat, colors = \"hero\", dodge = 0.4) # increase space between error bars"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_randomeffects.html","id":"marginal-effects-for-mixed-effects-models","dir":"Articles","previous_headings":"","what":"Marginal effects for mixed effects models","title":"Introduction: Adjusted Predictions and Marginal Effects for Random Effects Models","text":"Basically, type predictions, .e. whether account uncertainty random effects , can set type-argument. default, type = \"fixed\", means predictions population-level account random effect variances. Intervals confidence intervals predicted values.  type = \"random\", predicted values still population-level. However, random effect variances taken account, meaning intervals actually prediction intervals become larger. technically speaking, type = \"random\" accounts uncertainty fixed effects conditional estimates random-effect variances conditional modes (BLUPs). random-effect variance mean random-effect variance. Calculation based proposal Johnson et al. 2014, also implemented functions like performance::r2() insight::get_variance() get r-squared values random effect variances mixed models complex random effects structures. can seen, compared previous example type = \"fixed\", predicted values identical (population-level). However, standard errors, thus resulting confidence (prediction) intervals much larger .  reason type = \"fixed\" type = \"random\" return predictions population-level ggpredict() returns predicted values response specific levels given model predictors, defined data frame passed newdata-argument (predict()). data frame requires data model terms, including random effect terms. requires choose certain levels values also random effect term, set terms zero NA (population-level). Since general rule, level(s) random effect terms choose order represent random effects structure data, using population-level seems clear consistent approach. get predicted values specific level random effect term, simply define level condition-argument. Finally, possible obtain predicted values simulating model, predictions based simulate().","code":"library(ggeffects) library(lme4) data(sleepstudy) m <- lmer(Reaction ~ Days + (1 + Days | Subject), data = sleepstudy)  pr <- ggpredict(m, \"Days\") pr #> # Predicted values of Reaction #>  #> Days | Predicted |           95% CI #> ----------------------------------- #>    0 |    251.41 | [237.94, 264.87] #>    1 |    261.87 | [248.48, 275.27] #>    2 |    272.34 | [258.34, 286.34] #>    3 |    282.81 | [267.60, 298.02] #>    5 |    303.74 | [284.83, 322.65] #>    6 |    314.21 | [293.03, 335.39] #>    7 |    324.68 | [301.05, 348.31] #>    9 |    345.61 | [316.74, 374.48] #>  #> Adjusted for: #> * Subject = 0 (population-level) plot(pr) pr <- ggpredict(m, \"Days\", type = \"random\") pr #> # Predicted values of Reaction #>  #> Days | Predicted |           95% CI #> ----------------------------------- #>    0 |    251.41 | [199.13, 303.68] #>    1 |    261.87 | [209.62, 314.13] #>    2 |    272.34 | [219.92, 324.75] #>    3 |    282.81 | [230.06, 335.56] #>    5 |    303.74 | [249.81, 357.68] #>    6 |    314.21 | [259.44, 368.98] #>    7 |    324.68 | [268.91, 380.44] #>    9 |    345.61 | [287.43, 403.79] #>  #> Adjusted for: #> * Subject = 0 (population-level) plot(pr) ggpredict(m, \"Days\", type = \"random\", condition = c(Subject = 330)) #> # Predicted values of Reaction #>  #> Days | Predicted |           95% CI #> ----------------------------------- #>    0 |    275.10 | [222.82, 327.37] #>    1 |    280.75 | [228.49, 333.01] #>    2 |    286.40 | [233.99, 338.82] #>    3 |    292.05 | [239.30, 344.80] #>    5 |    303.36 | [249.43, 357.29] #>    6 |    309.01 | [254.24, 363.79] #>    7 |    314.67 | [258.90, 370.43] #>    9 |    325.97 | [267.79, 384.15] ggpredict(m, \"Days\", type = \"sim\") #> # Predicted values of Reaction #>  #> Days | Predicted |           95% CI #> ----------------------------------- #>    0 |    251.44 | [202.03, 301.25] #>    1 |    261.54 | [211.33, 311.51] #>    2 |    272.43 | [221.63, 321.72] #>    3 |    282.63 | [231.74, 332.32] #>    5 |    303.45 | [253.96, 353.86] #>    6 |    314.42 | [264.91, 364.53] #>    7 |    324.73 | [275.88, 374.05] #>    9 |    345.72 | [296.34, 395.71] #>  #> Adjusted for: #> * Subject = 0 (population-level)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_randomeffects.html","id":"marginal-effects-for-zero-inflated-mixed-models","dir":"Articles","previous_headings":"","what":"Marginal effects for zero-inflated mixed models","title":"Introduction: Adjusted Predictions and Marginal Effects for Random Effects Models","text":"zero-inflated mixed effects models, typically fitted glmmTMB GLMMadaptive packages, predicted values can conditioned fixed effects conditional model (type = \"fixed\") fixed effects zero-inflation component (type = \"zero_inflated\") fixed effects conditional model (population-level), taking random-effect variances account (type = \"random\") fixed effects zero-inflation component (population-level), taking random-effect variances account (type = \"zi_random\") model parameters (type = \"sim\") Similar mixed models without zero-inflation component, type = \"fixed\" type = \"random\" glmmTMB-models (zero-inflation) return predictions population-level, latter option accounts uncertainty random effects. short, predict(..., type = \"link\") called (however, predicted values back-transformed response scale). type = \"zero_inflated\", predicted response value expected value mu*(1-p) without conditioning random effects. Since zero inflation conditional model working “opposite directions”, higher expected value zero inflation means lower response, higher value conditional model means higher response. possible calculate predicted values predict(..., type = \"response\"), standard errors confidence intervals can derived directly predict()-function. Thus, confidence intervals type = \"zero_inflated\" based quantiles simulated draws multivariate normal distribution (see also Brooks et al. 2017, pp.391-392 details). type = \"zi_random\", predicted response value expected value mu*(1-p), accounting random-effect variances. Intervals calculated way type = \"zero_inflated\", except mean random effect variance considered thus prediction intervals rather confidence intervals returned. Finally, possible obtain predicted values simulating model, predictions based simulate() (see Brooks et al. 2017, pp.392-393 details). achieve , use type = \"simulate\".","code":"library(glmmTMB) data(Salamanders) m <- glmmTMB(   count ~ spp + mined + (1 | site),    ziformula = ~ spp + mined,    family = truncated_poisson,    data = Salamanders ) ggpredict(m, \"spp\") #> # Predicted counts of count #>  #> spp   | Predicted |       95% CI #> -------------------------------- #> GP    |      0.94 | [0.62, 1.40] #> PR    |      0.56 | [0.30, 1.02] #> DM    |      1.17 | [0.80, 1.70] #> EC-A  |      0.77 | [0.48, 1.23] #> EC-L  |      1.79 | [1.25, 2.55] #> DES-L |      1.71 | [1.20, 2.44] #> DF    |      0.98 | [0.67, 1.44] #>  #> Adjusted for: #> * mined = yes #> *  site = NA (population-level)  ggpredict(m, \"spp\", type = \"random\") #> # Predicted counts of count #>  #> spp   | Predicted |        95% CI #> --------------------------------- #> GP    |      0.94 | [0.13,  6.92] #> PR    |      0.56 | [0.07,  4.32] #> DM    |      1.17 | [0.16,  8.61] #> EC-A  |      0.77 | [0.10,  5.77] #> EC-L  |      1.79 | [0.24, 13.09] #> DES-L |      1.71 | [0.23, 12.56] #> DF    |      0.98 | [0.13,  7.22] #>  #> Adjusted for: #> * mined = yes #> *  site = NA (population-level) ggpredict(m, \"spp\", type = \"zero_inflated\") #> # Predicted counts of count #>  #> spp   | Predicted |       95% CI #> -------------------------------- #> GP    |      0.23 | [0.14, 0.32] #> PR    |      0.04 | [0.02, 0.06] #> DM    |      0.36 | [0.21, 0.50] #> EC-A  |      0.08 | [0.04, 0.11] #> EC-L  |      0.45 | [0.24, 0.66] #> DES-L |      0.53 | [0.28, 0.77] #> DF    |      0.33 | [0.21, 0.45] #>  #> Adjusted for: #> * mined = yes #> *  site = NA (population-level) ggpredict(m, \"spp\", type = \"zi_random\") #> # Predicted counts of count #>  #> spp   | Predicted |       95% CI #> -------------------------------- #> GP    |      0.23 | [0.02, 2.23] #> PR    |      0.04 | [0.00, 0.42] #> DM    |      0.36 | [0.03, 3.52] #> EC-A  |      0.08 | [0.01, 0.80] #> EC-L  |      0.45 | [0.03, 4.75] #> DES-L |      0.53 | [0.04, 5.42] #> DF    |      0.33 | [0.03, 3.19] #>  #> Adjusted for: #> * mined = yes #> *  site = NA (population-level) ggpredict(m, \"spp\", type = \"simulate\") #> # Predicted counts of count #>  #> spp   | Predicted |       95% CI #> -------------------------------- #> GP    |      1.09 | [0.00, 4.14] #> PR    |      0.30 | [0.00, 2.28] #> DM    |      1.52 | [0.00, 5.21] #> EC-A  |      0.54 | [0.00, 3.10] #> EC-L  |      2.19 | [0.00, 7.12] #> DES-L |      2.27 | [0.00, 7.12] #> DF    |      1.30 | [0.00, 4.56] #>  #> Adjusted for: #> * mined = yes #> *  site = NA (population-level)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_randomeffects.html","id":"marginal-effects-for-each-level-of-random-effects","dir":"Articles","previous_headings":"","what":"Marginal effects for each level of random effects","title":"Introduction: Adjusted Predictions and Marginal Effects for Random Effects Models","text":"Marginal effects can also calculated group level mixed models. Simply add name related random effects term terms-argument, set type = \"random\". following example, fit linear mixed model first simply plot marginal effects, conditioned random-effect variances.  Changing type type = \"random\" still returns population-level predictions default. Recall major difference type = \"fixed\" type = \"random\" uncertainty variance parameters. leads larger confidence intervals (.e. prediction intervals) marginal effects type = \"random\".  compute marginal effects grouping level, add related random term terms-argument. case, prediction intervals calculated marginal effects conditioned group level random effects.  Marginal effects, conditioned random effects, can also calculated specific levels . Add related values brackets variable name terms-argument.  …including prediction intervals…  complex plot scenario term (c12hour) certain values two terms (c161sex, c160age) specific levels random effects (e15relat), four variables terms-argument.  group factor many levels, can also take random sample possible levels plot marginal effects subsample group levels. , use term = \"<groupfactor> [sample=n]\".  can also add observed data points group using add.data = TRUE.","code":"library(sjlabelled) data(efc) efc$e15relat <- as_label(efc$e15relat) m <- lmer(neg_c_7 ~ c12hour + c160age + c161sex + (1 | e15relat), data = efc) me <- ggpredict(m, terms = \"c12hour\") plot(me) me <- ggpredict(m, terms = \"c12hour\", type = \"random\") plot(me) me <- ggpredict(m, terms = c(\"c12hour\", \"e15relat\"), type = \"random\") plot(me, ci = FALSE) me <- ggpredict(m, terms = c(\"c12hour\", \"e15relat [child,sibling]\"), type = \"random\") plot(me, ci = FALSE) plot(me) me <- ggpredict(   m,    terms = c(\"c12hour\", \"c161sex\", \"c160age\", \"e15relat [child,sibling]\"),    type = \"random\" ) plot(me) set.seed(123) m <- lmer(Reaction ~ Days + (1 + Days | Subject), data = sleepstudy) me <- ggpredict(m, terms = c(\"Days\", \"Subject [sample=7]\"), type = \"random\") plot(me) plot(me, add.data = TRUE, ci = FALSE)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_randomeffects.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Introduction: Adjusted Predictions and Marginal Effects for Random Effects Models","text":"Brooks , Kristensen K, Benthem KJ van, Magnusson , Berg CW, Nielsen , et al. glmmTMB Balances Speed Flexibility Among Packages Zero-inflated Generalized Linear Mixed Modeling. R Journal. 2017;9: 378–400. Johnson PC, O’Hara RB. 2014. Extension Nakagawa & Schielzeth’s R2GLMM random slopes models. Methods Ecol Evol, 5: 944-946. (doi: 10.1111/2041-210X.12225)","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_logisticmixedmodel.html","id":"simple-logistic-mixed-effects-model","dir":"Articles","previous_headings":"","what":"Simple Logistic Mixed Effects Model","title":"Practical example: Logistic Mixed Effects Model with Interaction Term","text":"start fitting simple mixed effects model. discrete variable, marginal effects levels calculated default. continuous variables, pretty range values generated. See details value ranges vignette marginal effects specific values. logistic regression models, since ggeffects returns marginal effects response scale, predicted values predicted probabilities. Furthermore, mixed models, predicted values typically population level, group-specific. plot marginal effects, simply plot returned results use pipe.","code":"m1 <- glmer(   outcome ~ var_binom + var_cont + (1 | group),    data = dat,    family = binomial(link = \"logit\") ) ggpredict(m1, \"var_binom\") #> # Predicted probabilities of outcome #>  #> var_binom | Predicted |       95% CI #> ------------------------------------ #> 0         |      0.37 | [0.25, 0.51] #> 1         |      0.38 | [0.18, 0.63] #>  #> Adjusted for: #> * var_cont = -0.00 #> *    group = 0 (population-level)  ggpredict(m1, \"var_cont\") #> Data were 'prettified'. Consider using `terms=\"var_cont [all]\"` to get #>   smooth plots. #> # Predicted probabilities of outcome #>  #> var_cont | Predicted |       95% CI #> ----------------------------------- #>    -2.50 |      0.34 | [0.13, 0.63] #>    -2.00 |      0.34 | [0.16, 0.59] #>    -1.00 |      0.36 | [0.21, 0.53] #>     0.00 |      0.37 | [0.25, 0.51] #>     0.50 |      0.38 | [0.25, 0.52] #>     1.00 |      0.38 | [0.24, 0.55] #>     2.00 |      0.40 | [0.19, 0.64] #>     3.50 |      0.42 | [0.13, 0.77] #>  #> Adjusted for: #> * var_binom = 0 #> *     group = 0 (population-level) # save marginal effects in an object and plot me <- ggpredict(m1, \"var_binom\") plot(me) # plot using the pipe ggpredict(m1, \"var_cont\") %>% plot()"},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_logisticmixedmodel.html","id":"logistic-mixed-effects-model-with-interaction-term","dir":"Articles","previous_headings":"","what":"Logistic Mixed Effects Model with Interaction Term","title":"Practical example: Logistic Mixed Effects Model with Interaction Term","text":"Next, fit model interaction binomial continuous variable. compute plot marginal effects interaction terms, simply specify terms, .e. names variables, character vector terms-argument. Since interaction var_binom var_cont, argument terms = c(\"var_binom\", \"var_cont\"). However, first variable terms-argument used predictor along x-axis. Marginal effects plotted specific values specific levels second variable. second variable factor, marginal effects level plotted. second variable continuous, representative values chosen (typically, mean +/- one SD, see marginal effects specific values).","code":"m2 <- glmer(   outcome ~ var_binom * var_cont + (1 | group),    data = dat,    family = binomial(link = \"logit\") ) ggpredict(m2, c(\"var_cont\", \"var_binom\")) %>% plot() #> Data were 'prettified'. Consider using `terms=\"var_cont [all]\"` to get #>   smooth plots. ggpredict(m2, c(\"var_binom\", \"var_cont\")) %>% plot()"},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_logisticmixedmodel.html","id":"logistic-mixed-effects-model-with-quadratic-interaction-term","dir":"Articles","previous_headings":"","what":"Logistic Mixed Effects Model with quadratic Interaction Term","title":"Practical example: Logistic Mixed Effects Model with Interaction Term","text":"Now fit model interaction term, continuous variable modelled quadratic term. , ggeffect automatically plots high-order terms specified terms-argument. Hence, function call identical previous examples interaction terms, polynomial term included.  can see, ggeffects also returned message indicated plot may look smooth due involvement polynomial spline terms: Model contains splines polynomial terms. Consider using terms=\"var_cont []\" get smooth plots. See also package-vignette ‘Marginal Effects Specific Values’. mixed models, computing marginal effects spline polynomial terms may lead memory allocation problems. sure happen, add []-tag terms-argument, described message:  plot produces much smoother curves.","code":"m3 <- glmer(   outcome ~ var_binom * poly(var_cont, degree = 2, raw = TRUE) + (1 | group),    data = dat,    family = binomial(link = \"logit\") ) ggpredict(m3, c(\"var_cont\", \"var_binom\")) %>% plot() #> Model contains splines or polynomial terms. Consider using #>   `terms=\"var_cont [all]\"` to get smooth plots. See also package-vignette #>   'Marginal Effects at Specific Values'. ggpredict(m3, c(\"var_cont [all]\", \"var_binom\")) %>% plot()"},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_logisticmixedmodel.html","id":"logistic-mixed-effects-model-with-three-way-interaction","dir":"Articles","previous_headings":"","what":"Logistic Mixed Effects Model with Three-Way Interaction","title":"Practical example: Logistic Mixed Effects Model with Interaction Term","text":"last model produce nice plots, sake demonstration, fit model three interaction terms, including polynomial spline terms. Since marginal effects var_cont levels var_cont2 var_binom, groups, also facets plot three “dimensions”. Three-way interactions plotted simply speficying terms question terms-argument.","code":"set.seed(321) dat <- data.frame(   outcome = rbinom(n = 100, size = 1, prob = 0.35),   var_binom = rbinom(n = 100, size = 1, prob = 0.5),   var_cont = rnorm(n = 100, mean = 10, sd = 7),   var_cont2 = rnorm(n = 100, mean = 5, sd = 2),   group = sample(letters[1:4], size = 100, replace = TRUE) )   m4 <- glmer(   outcome ~ var_binom * poly(var_cont, degree = 2) * ns(var_cont2, df = 3) + (1 | group),   data = dat,    family = binomial(link = \"logit\") ) ggpredict(m4, c(\"var_cont [all]\", \"var_cont2\", \"var_binom\")) %>% plot()"},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_robustestimation.html","id":"predictions-with-normal-standard-errors","dir":"Articles","previous_headings":"","what":"Predictions with normal standard errors","title":"Practical example: (Cluster) Robust Standard Errors","text":"example, use normal standard errors, returned predict(), compute confidence intervals.","code":"ggpredict(model, \"X1\") #> # Predicted values of y #>  #>    X1 | Predicted |         95% CI #> ---------------------------------- #> -2.50 |     -1.54 | [-2.42, -0.67] #> -2.00 |     -1.28 | [-2.00, -0.55] #> -1.00 |     -0.74 | [-1.19, -0.29] #> -0.50 |     -0.47 | [-0.81, -0.13] #>  0.00 |     -0.20 | [-0.50,  0.10] #>  0.50 |      0.07 | [-0.27,  0.41] #>  1.00 |      0.34 | [-0.10,  0.78] #>  2.50 |      1.14 | [ 0.28,  2.01] #>  #> Adjusted for: #> * X2 = -0.08 #> * X3 =  0.09 me <- ggpredict(model, \"X1\") plot(me)"},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_robustestimation.html","id":"predictions-with-hc-estimated-standard-errors","dir":"Articles","previous_headings":"","what":"Predictions with HC-estimated standard errors","title":"Practical example: (Cluster) Robust Standard Errors","text":"Now, use sandwich::vcovHC() estimate heteroskedasticity-consistent standard errors. , first function name, vcovHC(), must supplied vcov.fun-argument. sandwich::vcovHC(), turn, different types estimation. must specified vcov.type.","code":"ggpredict(model, \"X1\", vcov.fun = \"vcovHC\", vcov.type = \"HC0\") #> # Predicted values of y #>  #>    X1 | Predicted |         95% CI #> ---------------------------------- #> -2.50 |     -1.54 | [-2.41, -0.68] #> -2.00 |     -1.28 | [-1.98, -0.57] #> -1.00 |     -0.74 | [-1.14, -0.34] #> -0.50 |     -0.47 | [-0.77, -0.17] #>  0.00 |     -0.20 | [-0.49,  0.09] #>  0.50 |      0.07 | [-0.31,  0.44] #>  1.00 |      0.34 | [-0.17,  0.84] #>  2.50 |      1.14 | [ 0.15,  2.14] #>  #> Adjusted for: #> * X2 = -0.08 #> * X3 =  0.09 me <- ggpredict(model, \"X1\", vcov.fun = \"vcovHC\", vcov.type = \"HC0\") plot(me)"},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_robustestimation.html","id":"predictions-with-cluster-robust-standard-errors","dir":"Articles","previous_headings":"","what":"Predictions with cluster-robust standard errors","title":"Practical example: (Cluster) Robust Standard Errors","text":"last example shows define cluster-robust standard errors. based clubSandwich::vcovCR(). Thus, vcov.fun = \"vcovCR\" always required estimating cluster robust standard errors. clubSandwich::vcovCR() also different estimation types, must specified vcov.type. Furthermore, clubSandwich::vcovCR() requires cluster-argument, must specified vcov.args:","code":"ggpredict(   model, \"X1\", vcov.fun = \"vcovCR\", vcov.type = \"CR0\",    vcov.args = list(cluster = dat$cluster) ) #> # Predicted values of y #>  #>    X1 | Predicted |         95% CI #> ---------------------------------- #> -2.50 |     -1.54 | [-2.34, -0.75] #> -2.00 |     -1.28 | [-1.97, -0.58] #> -1.00 |     -0.74 | [-1.31, -0.17] #> -0.50 |     -0.47 | [-1.04,  0.10] #>  0.00 |     -0.20 | [-0.82,  0.41] #>  0.50 |      0.07 | [-0.63,  0.76] #>  1.00 |      0.34 | [-0.46,  1.13] #>  2.50 |      1.14 | [-0.05,  2.33] #>  #> Adjusted for: #> * X2 = -0.08 #> * X3 =  0.09 me <- ggpredict(   model, \"X1\", vcov.fun = \"vcovCR\", vcov.type = \"CR0\",    vcov.args = list(cluster = dat$cluster) ) plot(me)"},{"path":"https://strengejacke.github.io/ggeffects/articles/technical_stata.html","id":"why-is-the-output-from-stata-different-from-the-output-from-ggeffect","dir":"Articles","previous_headings":"","what":"Why is the output from Stata different from the output from ggeffect?","title":"Technical Details: Different Output between Stata and ggeffects","text":"Stata’s equivalent marginal effects produced ggeffects margins-command. However, results always identical. models non-gaussian families, point estimates marginal effects identical, confidence intervals differ. explanation, difference. First, fit logistic regression model.","code":"library(magrittr) set.seed(5)  data <- data.frame(   outcome = rbinom(100, 1, 0.5),   var1 = rbinom(100, 1, 0.1),   var2 = rnorm(100, 10, 7) )  m <- glm(   outcome ~ var1 * var2,    data = data,    family = binomial(link = \"logit\") )"},{"path":[]},{"path":"https://strengejacke.github.io/ggeffects/articles/technical_stata.html","id":"the-stata-plot","dir":"Articles","previous_headings":"Why is the output from Stata different from the output from ggeffect? > Example with graphical output","what":"The Stata plot","title":"Technical Details: Different Output between Stata and ggeffects","text":"code Stata produce marginal effects plot. resulting image looks like .","code":"use data.dta, clear quietly logit outcome c.var1##c.var2 quietly margins, at(var2 = (-8(0.5)28) var1 = (0 1)) marginsplot"},{"path":"https://strengejacke.github.io/ggeffects/articles/technical_stata.html","id":"the-ggeffects-plot","dir":"Articles","previous_headings":"Why is the output from Stata different from the output from ggeffect? > Example with graphical output","what":"The ggeffects plot","title":"Technical Details: Different Output between Stata and ggeffects","text":"use ggeffects, plot slighlty differs.  can see, confidence intervals Stata plot outside plausible range [0, 1], means predicted uncertainty Stata output probability higher 1 lower 0, ggpredict() computes confidence intervals within possible range.","code":"library(ggeffects) ggpredict(m, c(\"var2\", \"var1\")) %>% plot()"},{"path":"https://strengejacke.github.io/ggeffects/articles/technical_stata.html","id":"conclusion","dir":"Articles","previous_headings":"Why is the output from Stata different from the output from ggeffect?","what":"Conclusion","title":"Technical Details: Different Output between Stata and ggeffects","text":"seems like Stata getting confidence intervals wrong. Predictions standard errors returned Stata (transformed) response scale. Obviously, confidence intervals computed estimate +/- 1.96 * standard error, may lead confidence intervals reasonable bounds (e.g. 1 0 predicted probabilities). transformed estimate (response scale) always 0 1, true transformed standard errors. However, adding subtracting approx. 2 * transformed SE transformed estimate longer ensure confidence intervals within correct range. precise way calculation calculate estimates, standard errors confidence intervals (untransformed) scale linear predictor back-transform.","code":""},{"path":"https://strengejacke.github.io/ggeffects/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Lüdecke. Author, maintainer. Frederik Aust. Contributor. Sam Crawley. Contributor. Mattan S. Ben-Shachar. Contributor.","code":""},{"path":"https://strengejacke.github.io/ggeffects/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lüdecke D (2018). “ggeffects: Tidy Data Frames Marginal Effects Regression Models.” Journal Open Source Software, 3(26), 772. doi:10.21105/joss.00772.","code":"@Article{,   title = {ggeffects: Tidy Data Frames of Marginal Effects from Regression Models.},   volume = {3},   doi = {10.21105/joss.00772},   number = {26},   journal = {Journal of Open Source Software},   author = {Daniel Lüdecke},   year = {2018},   pages = {772}, }"},{"path":"https://strengejacke.github.io/ggeffects/index.html","id":"ggeffects---estimated-marginal-means-and-adjusted-predictions-from-regression-models","dir":"","previous_headings":"","what":"Create Tidy Data Frames of Marginal Effects for ggplot from Model Outputs","title":"Create Tidy Data Frames of Marginal Effects for ggplot from Model Outputs","text":"Lüdecke D (2018). ggeffects: Tidy Data Frames Marginal Effects Regression Models. Journal Open Source Software, 3(26), 772. doi: 10.21105/joss.00772","code":""},{"path":"https://strengejacke.github.io/ggeffects/index.html","id":"why-do-we-need-marginalconditional-effects-or-adjusted-predicted-values","dir":"","previous_headings":"","what":"Why do we need (marginal/conditional) effects or (adjusted) predicted values?","title":"Create Tidy Data Frames of Marginal Effects for ggplot from Model Outputs","text":"Results regression models typically presented tables easy understand. complex models include interaction quadratic / spline terms, tables numbers less helpful difficult interpret. cases, marginal effects adjusted predictions far easier understand. particular, visualization effects predictions allows intuitively get idea predictors outcome associated, even complex models.","code":""},{"path":"https://strengejacke.github.io/ggeffects/index.html","id":"aim-of-this-package","dir":"","previous_headings":"","what":"Aim of this package","title":"Create Tidy Data Frames of Marginal Effects for ggplot from Model Outputs","text":"ggeffects light-weight package aims easily calculating marginal effects adjusted predictions (: estimated marginal means) mean representative values covariates (see definitions ) statistical models, .e. predictions generated model one holds non-focal variables constant varies focal variable(s). Furthermore, possible compute contrasts pairwise comparisons, test predictions differences predictions statistical significance. achieved three core ideas describe philosophy function design: Functions type-safe always return data frame , consistent structure; simple, unique approach calculate marginal effects/adjusted predictions estimated marginal means many different models; package supports “labelled data” (Lüdecke 2018), allows human readable annotations graphical outputs. means, users need care expensive steps modeling visualize results. returned data frame ready use ggplot2-package, however, also plot()-method easily create publication-ready figures.","code":""},{"path":"https://strengejacke.github.io/ggeffects/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create Tidy Data Frames of Marginal Effects for ggplot from Model Outputs","text":"can run ggeffects::install_latest() install latest development version r-universe.","code":""},{"path":"https://strengejacke.github.io/ggeffects/index.html","id":"definition-of-marginal-effects","dir":"","previous_headings":"","what":"Definition of “marginal effects”","title":"Create Tidy Data Frames of Marginal Effects for ggplot from Model Outputs","text":"common language across fields regarding unique meaning “marginal effects”. Thus, wording throughout package may vary. Maybe “adjusted predictions” comes closest ggeffects actually . avoid confusion actually calculated returned package’s functions ggpredict(), ggemmeans() ggeffect(), recommended read vignette different terminology meanings.","code":""},{"path":"https://strengejacke.github.io/ggeffects/index.html","id":"documentation-and-support","dir":"","previous_headings":"","what":"Documentation and Support","title":"Create Tidy Data Frames of Marginal Effects for ggplot from Model Outputs","text":"Please visit https://strengejacke.github.io/ggeffects/ documentation vignettes. questions functionality, may either contact via email also file issue.","code":""},{"path":"https://strengejacke.github.io/ggeffects/index.html","id":"ggeffects-supports-many-different-models-and-is-easy-to-use","dir":"","previous_headings":"","what":"ggeffects supports many different models and is easy to use","title":"Create Tidy Data Frames of Marginal Effects for ggplot from Model Outputs","text":"Marginal effects adjusted predictions can calculated many different models. Currently supported model-objects : ‘averaging’, ‘bamlss’, ‘bayesx’, ‘betabin’, ‘betareg’, ‘bglmer’, ‘bigglm’, ‘biglm’, ‘blmer’, ‘bracl’, ‘brglm’, ‘brmsfit’, ‘brmultinom’, ‘cgam’, ‘cgamm’, ‘clm’, ‘clm2’, ‘clmm’, ‘coxph’, ‘feglm’, ‘fixest’, ‘gam’, ‘Gam’, ‘gamlss’, ‘gamm’, ‘gamm4’, ‘gee’, ‘geeglm’, ‘glimML’, ‘glm’, ‘glm.nb’, ‘glmer.nb’, ‘glmerMod’, ‘glmmPQL’, ‘glmmTMB’, ‘glmrob’, ‘glmRob’, ‘glmx’, ‘gls’, ‘hurdle’, ‘ivreg’, ‘lm’, ‘lm_robust’, ‘lme’, ‘lmerMod’, ‘lmrob’, ‘lmRob’, ‘logistf’, ‘logitr’, ‘lrm’, ‘mblogit’, ‘mclogit’, ‘MCMCglmm’, ‘merModLmerTest’, ‘MixMod’, ‘mixor’, ‘mlogit’, ‘multinom’, ‘negbin’, ‘nlmerMod’, ‘ols’, ‘orm’, ‘phyloglm’, ‘phylolm’, ‘plm’, ‘polr’, ‘rlm’, ‘rlmerMod’, ‘rq’, ‘rqss’, ‘speedglm’, ‘speedlm’, ‘stanreg’, ‘survreg’, ‘svyglm’, ‘svyglm.nb’, ‘tidymodels’, ‘tobit’, ‘truncreg’, ‘vgam’, ‘vglm’, ‘wblm’, ‘wbm’, ‘Zelig-relogit’, ‘zeroinfl’ ‘zerotrunc’. Support models varies function, .e. although ggpredict(), ggemmeans() ggeffect() support models, models supported exclusively one three functions. models listed might work well, currently tested. Interaction terms, splines polynomial terms also supported. main functions ggpredict(), ggemmeans() ggeffect(). generic plot()-method plot results using ggplot2.","code":""},{"path":"https://strengejacke.github.io/ggeffects/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Create Tidy Data Frames of Marginal Effects for ggplot from Model Outputs","text":"returned data frames always , consistent structure column names, ’s easy create ggplot-plots without need re-write function call. x predicted values x- y-axis. conf.low conf.high used ymin ymax aesthetics ribbons add confidence bands plot. group can used grouping-aesthetics, faceting. ggpredict() requires least one, four terms specified terms-argument. Predicted values response, along values first term calculated, optionally grouped terms specified terms.","code":""},{"path":"https://strengejacke.github.io/ggeffects/index.html","id":"adjusted-predictions-for-one-focal-predictor","dir":"","previous_headings":"Examples","what":"Adjusted predictions for one focal predictor","title":"Create Tidy Data Frames of Marginal Effects for ggplot from Model Outputs","text":"possible call ggplot look like :  However, also plot()-method. method uses convenient defaults, easily create suitable plot marginal effects.","code":"library(ggeffects) library(splines) data(efc) fit <- lm(barthtot ~ c12hour + bs(neg_c_7) * c161sex + e42dep, data = efc)  ggpredict(fit, terms = \"c12hour\") #> # Predicted values of barthtot #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>       4 |     67.89 | [65.81, 69.96] #>      12 |     67.07 | [65.10, 69.05] #>      22 |     66.06 | [64.18, 67.94] #>      36 |     64.64 | [62.84, 66.45] #>      49 |     63.32 | [61.51, 65.14] #>      70 |     61.20 | [59.22, 63.17] #>     100 |     58.15 | [55.70, 60.60] #>     168 |     51.26 | [47.27, 55.26] #>  #> Adjusted for: #> * neg_c_7 = 11.83 #> * c161sex =  1.76 #> *  e42dep =  2.93 library(ggplot2) mydf <- ggpredict(fit, terms = \"c12hour\") ggplot(mydf, aes(x, predicted)) +   geom_line() +   geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1) mydf <- ggpredict(fit, terms = \"c12hour\") plot(mydf)"},{"path":"https://strengejacke.github.io/ggeffects/index.html","id":"adjusted-predictions-for-several-focal-predictors","dir":"","previous_headings":"Examples","what":"Adjusted predictions for several focal predictors","title":"Create Tidy Data Frames of Marginal Effects for ggplot from Model Outputs","text":"three variables, predictions can grouped faceted.  plot() works case, well:","code":"ggpredict(fit, terms = c(\"neg_c_7\", \"c161sex\", \"e42dep\")) #> # Predicted values of barthtot #>  #> # c161sex = 1 #> #  e42dep = 1 #>  #> neg_c_7 | Predicted |          95% CI #> ------------------------------------- #>       7 |    102.74 | [95.96, 109.52] #>      12 |    102.27 | [97.10, 107.44] #>      17 |     93.79 | [86.95, 100.64] #>      28 |    164.57 | [95.88, 233.27] #>  #> # c161sex = 2 #> #  e42dep = 1 #>  #> neg_c_7 | Predicted |           95% CI #> -------------------------------------- #>       7 |    109.54 | [105.19, 113.88] #>      12 |     99.81 | [ 95.94, 103.68] #>      17 |     94.90 | [ 90.20,  99.60] #>      28 |     90.26 | [ 71.77, 108.76] #>  #> # c161sex = 1 #> #  e42dep = 2 #>  #> neg_c_7 | Predicted |          95% CI #> ------------------------------------- #>       7 |     83.73 | [77.31,  90.15] #>      12 |     83.26 | [78.94,  87.59] #>      17 |     74.79 | [68.67,  80.90] #>      28 |    145.57 | [76.90, 214.23] #>  #> # c161sex = 2 #> #  e42dep = 2 #>  #> neg_c_7 | Predicted |         95% CI #> ------------------------------------ #>       7 |     90.53 | [86.71, 94.35] #>      12 |     80.80 | [78.16, 83.44] #>      17 |     75.90 | [72.28, 79.51] #>      28 |     71.26 | [53.04, 89.47] #>  #> # c161sex = 1 #> #  e42dep = 3 #>  #> neg_c_7 | Predicted |          95% CI #> ------------------------------------- #>       7 |     64.72 | [58.27,  71.17] #>      12 |     64.26 | [60.29,  68.22] #>      17 |     55.78 | [50.03,  61.53] #>      28 |    126.56 | [57.88, 195.24] #>  #> # c161sex = 2 #> #  e42dep = 3 #>  #> neg_c_7 | Predicted |         95% CI #> ------------------------------------ #>       7 |     71.52 | [67.59, 75.46] #>      12 |     61.79 | [59.78, 63.80] #>      17 |     56.89 | [53.86, 59.92] #>      28 |     52.25 | [34.18, 70.32] #>  #> # c161sex = 1 #> #  e42dep = 4 #>  #> neg_c_7 | Predicted |          95% CI #> ------------------------------------- #>       7 |     45.72 | [38.85,  52.58] #>      12 |     45.25 | [41.02,  49.48] #>      17 |     36.77 | [30.96,  42.59] #>      28 |    107.55 | [38.83, 176.28] #>  #> # c161sex = 2 #> #  e42dep = 4 #>  #> neg_c_7 | Predicted |         95% CI #> ------------------------------------ #>       7 |     52.51 | [47.88, 57.15] #>      12 |     42.79 | [40.29, 45.29] #>      17 |     37.88 | [34.66, 41.11] #>      28 |     33.24 | [15.18, 51.31] #>  #> Adjusted for: #> * c12hour = 42.10  mydf <- ggpredict(fit, terms = c(\"neg_c_7\", \"c161sex\", \"e42dep\")) ggplot(mydf, aes(x = x, y = predicted, colour = group)) +   geom_line() +   facet_wrap(~facet) plot(mydf)"},{"path":"https://strengejacke.github.io/ggeffects/index.html","id":"contrasts-and-pairwise-comparisons","dir":"","previous_headings":"Examples","what":"Contrasts and pairwise comparisons","title":"Create Tidy Data Frames of Marginal Effects for ggplot from Model Outputs","text":"Next, example interaction term. want know whether two slopes significantly different .  can achieved hypothesis_test(). can conclude slopes (“linear trends”) barthtot different groups c161sex statistically significantly different . features explained detail package-vignettes.","code":"fit <- lm(neg_c_7 ~ c12hour + barthtot * c161sex + e42dep, data = efc) result <- ggpredict(fit, c(\"barthtot\", \"c161sex\")) plot(result) hypothesis_test(result) #> # Linear trend for barthtot #>  #> c161sex | Contrast |        95% CI |     p #> ------------------------------------------ #> 1-2     | 7.09e-03 | [-0.01, 0.03] | 0.464"},{"path":"https://strengejacke.github.io/ggeffects/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Create Tidy Data Frames of Marginal Effects for ggplot from Model Outputs","text":"case want / cite package, please use citation('ggeffects') citation information: Lüdecke D (2018). ggeffects: Tidy Data Frames Marginal Effects Regression Models. Journal Open Source Software, 3(26), 772. doi: 10.21105/joss.00772","code":""},{"path":"https://strengejacke.github.io/ggeffects/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Create Tidy Data Frames of Marginal Effects for ggplot from Model Outputs","text":"Lüdecke, Daniel. 2018. “Sjlabelled: Labelled Data Utility Functions,” May. https://doi.org/10.5281/zenodo.1249215.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/collapse_by_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse raw data by random effect groups — collapse_by_group","title":"Collapse raw data by random effect groups — collapse_by_group","text":"function extracts raw data points (.e. data used fit model) \"averages\" (.e. \"collapses\") response variable levels grouping factor given collapse.. works mixed models.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/collapse_by_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse raw data by random effect groups — collapse_by_group","text":"","code":"collapse_by_group(grid, model, collapse.by = NULL, residuals = FALSE)"},{"path":"https://strengejacke.github.io/ggeffects/reference/collapse_by_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse raw data by random effect groups — collapse_by_group","text":"grid data frame representing data grid, object class ggeffects, returned ggpredict() others. model model compute partial residuals. data grid grid match predictors model. collapse.Name (random effects) grouping factor. Data collapsed levels factor. residuals Logical, TRUE, collapsed partial residuals instead raw data levels grouping factor.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/collapse_by_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse raw data by random effect groups — collapse_by_group","text":"data frame raw data points, averaged levels given grouping factor random effects. group level random effect saved column \"random\".","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/collapse_by_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse raw data by random effect groups — collapse_by_group","text":"","code":"library(ggeffects) if (require(\"lme4\", quietly = TRUE)) {   data(efc)   efc$e15relat <- as.factor(efc$e15relat)   efc$c161sex <- as.factor(efc$c161sex)   levels(efc$c161sex) <- c(\"male\", \"female\")   model <- lmer(neg_c_7 ~ c161sex + (1 | e15relat), data = efc)   me <- ggpredict(model, terms = \"c161sex\")   head(attributes(me)$rawdata)   collapse_by_group(me, model, \"e15relat\") } #>    x group_col facet random  response #> 1  1         1     1      1 12.297872 #> 2  2         1     1      1 13.347107 #> 3  1         1     1      2 11.585586 #> 4  2         1     1      2 12.118310 #> 5  1         1     1      3 12.166667 #> 6  2         1     1      3 10.545455 #> 7  1         1     1      4 10.750000 #> 8  2         1     1      4 11.726027 #> 9  1         1     1      5 11.333333 #> 10 2         1     1      5 10.235294 #> 11 1         1     1      6  8.200000 #> 12 2         1     1      6  9.235294 #> 13 1         1     1      7 13.000000 #> 14 2         1     1      7 10.400000 #> 15 1         1     1      8  9.666667 #> 16 2         1     1      8 10.955882"},{"path":"https://strengejacke.github.io/ggeffects/reference/efc.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample dataset from the EUROFAMCARE project — efc","title":"Sample dataset from the EUROFAMCARE project — efc","text":"SPSS sample data set, imported sjlabelled::read_spss() function.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/efc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample dataset from the EUROFAMCARE project — efc","text":"","code":"# Attach EFC-data data(efc)  # Show structure str(efc) #> 'data.frame':\t908 obs. of  28 variables: #>  $ c12hour : num  16 148 70 168 168 16 161 110 28 40 ... #>   ..- attr(*, \"label\")= chr \"average number of hours of care per week\" #>  $ e15relat: num  2 2 1 1 2 2 1 4 2 2 ... #>   ..- attr(*, \"label\")= chr \"relationship to elder\" #>   ..- attr(*, \"labels\")= Named num [1:8] 1 2 3 4 5 6 7 8 #>   .. ..- attr(*, \"names\")= chr [1:8] \"spouse/partner\" \"child\" \"sibling\" \"daughter or son -in-law\" ... #>  $ e16sex  : num  2 2 2 2 2 2 1 2 2 2 ... #>   ..- attr(*, \"label\")= chr \"elder's gender\" #>   ..- attr(*, \"labels\")= Named num [1:2] 1 2 #>   .. ..- attr(*, \"names\")= chr [1:2] \"male\" \"female\" #>  $ e17age  : num  83 88 82 67 84 85 74 87 79 83 ... #>   ..- attr(*, \"label\")= chr \"elder' age\" #>  $ e42dep  : num  3 3 3 4 4 4 4 4 4 4 ... #>   ..- attr(*, \"label\")= chr \"elder's dependency\" #>   ..- attr(*, \"labels\")= Named num [1:4] 1 2 3 4 #>   .. ..- attr(*, \"names\")= chr [1:4] \"independent\" \"slightly dependent\" \"moderately dependent\" \"severely dependent\" #>  $ c82cop1 : num  3 3 2 4 3 2 4 3 3 3 ... #>   ..- attr(*, \"label\")= chr \"do you feel you cope well as caregiver?\" #>   ..- attr(*, \"labels\")= Named num [1:4] 1 2 3 4 #>   .. ..- attr(*, \"names\")= chr [1:4] \"never\" \"sometimes\" \"often\" \"always\" #>  $ c83cop2 : num  2 3 2 1 2 2 2 2 2 2 ... #>   ..- attr(*, \"label\")= chr \"do you find caregiving too demanding?\" #>   ..- attr(*, \"labels\")= Named num [1:4] 1 2 3 4 #>   .. ..- attr(*, \"names\")= chr [1:4] \"Never\" \"Sometimes\" \"Often\" \"Always\" #>  $ c84cop3 : num  2 3 1 3 1 3 4 2 3 1 ... #>   ..- attr(*, \"label\")= chr \"does caregiving cause difficulties in your relationship with your friends?\" #>   ..- attr(*, \"labels\")= Named num [1:4] 1 2 3 4 #>   .. ..- attr(*, \"names\")= chr [1:4] \"Never\" \"Sometimes\" \"Often\" \"Always\" #>  $ c85cop4 : num  2 3 4 1 2 3 1 1 2 2 ... #>   ..- attr(*, \"label\")= chr \"does caregiving have negative effect on your physical health?\" #>   ..- attr(*, \"labels\")= Named num [1:4] 1 2 3 4 #>   .. ..- attr(*, \"names\")= chr [1:4] \"Never\" \"Sometimes\" \"Often\" \"Always\" #>  $ c86cop5 : num  1 4 1 1 2 3 1 1 2 1 ... #>   ..- attr(*, \"label\")= chr \"does caregiving cause difficulties in your relationship with your family?\" #>   ..- attr(*, \"labels\")= Named num [1:4] 1 2 3 4 #>   .. ..- attr(*, \"names\")= chr [1:4] \"Never\" \"Sometimes\" \"Often\" \"Always\" #>  $ c87cop6 : num  1 1 1 1 2 2 2 1 1 1 ... #>   ..- attr(*, \"label\")= chr \"does caregiving cause financial difficulties?\" #>   ..- attr(*, \"labels\")= Named num [1:4] 1 2 3 4 #>   .. ..- attr(*, \"names\")= chr [1:4] \"Never\" \"Sometimes\" \"Often\" \"Always\" #>  $ c88cop7 : num  2 3 1 1 1 2 4 2 3 1 ... #>   ..- attr(*, \"label\")= chr \"do you feel trapped in your role as caregiver?\" #>   ..- attr(*, \"labels\")= Named num [1:4] 1 2 3 4 #>   .. ..- attr(*, \"names\")= chr [1:4] \"Never\" \"Sometimes\" \"Often\" \"Always\" #>  $ c89cop8 : num  3 2 4 2 4 1 1 3 1 1 ... #>   ..- attr(*, \"label\")= chr \"do you feel supported by friends/neighbours?\" #>   ..- attr(*, \"labels\")= Named num [1:4] 1 2 3 4 #>   .. ..- attr(*, \"names\")= chr [1:4] \"never\" \"sometimes\" \"often\" \"always\" #>  $ c90cop9 : num  3 2 3 4 4 1 4 3 3 3 ... #>   ..- attr(*, \"label\")= chr \"do you feel caregiving worthwhile?\" #>   ..- attr(*, \"labels\")= Named num [1:4] 1 2 3 4 #>   .. ..- attr(*, \"names\")= chr [1:4] \"never\" \"sometimes\" \"often\" \"always\" #>  $ c160age : num  56 54 80 69 47 56 61 67 59 49 ... #>   ..- attr(*, \"label\")= chr \"carer' age\" #>  $ c161sex : num  2 2 1 1 2 1 2 2 2 2 ... #>   ..- attr(*, \"label\")= chr \"carer's gender\" #>   ..- attr(*, \"labels\")= Named num [1:2] 1 2 #>   .. ..- attr(*, \"names\")= chr [1:2] \"Male\" \"Female\" #>  $ c172code: num  2 2 1 2 2 2 2 2 NA 2 ... #>   ..- attr(*, \"label\")= chr \"carer's level of education\" #>   ..- attr(*, \"labels\")= Named num [1:3] 1 2 3 #>   .. ..- attr(*, \"names\")= chr [1:3] \"low level of education\" \"intermediate level of education\" \"high level of education\" #>  $ c175empl: num  1 1 0 0 0 1 0 0 0 0 ... #>   ..- attr(*, \"label\")= chr \"are you currently employed?\" #>   ..- attr(*, \"labels\")= Named num [1:2] 0 1 #>   .. ..- attr(*, \"names\")= chr [1:2] \"no\" \"yes\" #>  $ barthtot: num  75 75 35 0 25 60 5 35 15 0 ... #>   ..- attr(*, \"label\")= chr \"Total score BARTHEL INDEX\" #>  $ neg_c_7 : num  12 20 11 10 12 19 15 11 15 10 ... #>   ..- attr(*, \"label\")= chr \"Negative impact with 7 items\" #>  $ pos_v_4 : num  12 11 13 15 15 9 13 14 13 13 ... #>   ..- attr(*, \"label\")= chr \"Positive value with 4 items\" #>  $ quol_5  : num  14 10 7 12 19 8 20 20 8 15 ... #>   ..- attr(*, \"label\")= chr \"Quality of life 5 items\" #>  $ resttotn: num  0 4 0 2 2 1 0 0 0 1 ... #>   ..- attr(*, \"label\")= chr \"Job restrictions\" #>  $ tot_sc_e: num  4 0 1 0 1 3 0 1 2 1 ... #>   ..- attr(*, \"label\")= chr \"Services for elderly\" #>  $ n4pstu  : num  0 0 2 3 2 2 3 1 3 3 ... #>   ..- attr(*, \"label\")= chr \"Care level\" #>   ..- attr(*, \"labels\")= Named chr [1:5] \"0\" \"1\" \"2\" \"3\" ... #>   .. ..- attr(*, \"names\")= chr [1:5] \"No Care Level\" \"Care Level 1\" \"Care Level 2\" \"Care Level 3\" ... #>  $ nur_pst : num  NA NA 2 3 2 2 3 1 3 3 ... #>   ..- attr(*, \"label\")= chr \"Care level\" #>   ..- attr(*, \"labels\")= Named chr [1:3] \"1\" \"2\" \"3\" #>   .. ..- attr(*, \"names\")= chr [1:3] \"Care Level 1\" \"Care Level 2\" \"Care Level 3/3+\" #>  $ grp     : Factor w/ 8 levels \"spouse/partner\",..: 2 2 1 1 2 2 1 4 2 2 ... #>   ..- attr(*, \"label\")= chr \"relationship to elder\" #>  $ negc7d  : Factor w/ 2 levels \"0\",\"1\": 2 2 1 1 2 2 2 1 2 1 ... #>   ..- attr(*, \"label\")= chr \"Negative impact with 7 items\"  # show first rows head(efc) #>   c12hour e15relat e16sex e17age e42dep c82cop1 c83cop2 c84cop3 c85cop4 c86cop5 #> 1      16        2      2     83      3       3       2       2       2       1 #> 2     148        2      2     88      3       3       3       3       3       4 #> 3      70        1      2     82      3       2       2       1       4       1 #> 4     168        1      2     67      4       4       1       3       1       1 #> 5     168        2      2     84      4       3       2       1       2       2 #> 6      16        2      2     85      4       2       2       3       3       3 #>   c87cop6 c88cop7 c89cop8 c90cop9 c160age c161sex c172code c175empl barthtot #> 1       1       2       3       3      56       2        2        1       75 #> 2       1       3       2       2      54       2        2        1       75 #> 3       1       1       4       3      80       1        1        0       35 #> 4       1       1       2       4      69       1        2        0        0 #> 5       2       1       4       4      47       2        2        0       25 #> 6       2       2       1       1      56       1        2        1       60 #>   neg_c_7 pos_v_4 quol_5 resttotn tot_sc_e n4pstu nur_pst            grp negc7d #> 1      12      12     14        0        4      0      NA          child      1 #> 2      20      11     10        4        0      0      NA          child      1 #> 3      11      13      7        0        1      2       2 spouse/partner      0 #> 4      10      15     12        2        0      3       3 spouse/partner      0 #> 5      12      15     19        2        1      2       2          child      1 #> 6      19       9      8        1        3      2       2          child      1"},{"path":"https://strengejacke.github.io/ggeffects/reference/fish.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data set — fish","title":"Sample data set — fish","text":"sample data set, used tests examples.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/get_title.html","id":null,"dir":"Reference","previous_headings":"","what":"Get titles and labels from data — get_title","title":"Get titles and labels from data — get_title","text":"Get variable value labels ggeffects-objects. Functions like ggpredict() ggeffect() save information variable names value labels additional attributes returned data frame. especially helpful labelled data (see sjlabelled), since labels can used set axis labels titles.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/get_title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get titles and labels from data — get_title","text":"","code":"get_title(x, case = NULL)  get_x_title(x, case = NULL)  get_y_title(x, case = NULL)  get_legend_title(x, case = NULL)  get_legend_labels(x, case = NULL)  get_x_labels(x, case = NULL)  get_complete_df(x, case = NULL)"},{"path":"https://strengejacke.github.io/ggeffects/reference/get_title.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get titles and labels from data — get_title","text":"x object class ggeffects, returned ggeffects-function; get_complete_df(), must list ggeffects-objects. case Desired target case. Labels automatically converted specified character case. See ?sjlabelled::convert_case details argument.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/get_title.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get titles and labels from data — get_title","text":"titles labels character string, NULL, variables labels; get_complete_df() returns input list x single data frame, grouping variable indicates predicted values term.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/get_title.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get titles and labels from data — get_title","text":"","code":"if (require(\"sjmisc\", quietly = TRUE) &&     require(\"ggplot2\", quietly = TRUE) &&     require(\"effects\", quietly = TRUE)) {   data(efc)   efc$c172code <- to_factor(efc$c172code)   fit <- lm(barthtot ~ c12hour + neg_c_7 + c161sex + c172code, data = efc)    mydf <- ggpredict(fit, terms = c(\"c12hour\", \"c161sex\", \"c172code\"))    ggplot(mydf, aes(x = x, y = predicted, colour = group)) +     stat_smooth(method = \"lm\") +     facet_wrap(~facet, ncol = 2) +     labs(       x = get_x_title(mydf),       y = get_y_title(mydf),       colour = get_legend_title(mydf)     )    # adjusted predictions, a list of data frames (one data frame per term)   eff <- ggeffect(fit)   eff   get_complete_df(eff)    # adjusted predictions for education only, and get x-axis-labels   mydat <- eff[[\"c172code\"]]   ggplot(mydat, aes(x = x, y = predicted, group = group)) +     stat_summary(fun = sum, geom = \"line\") +     scale_x_discrete(labels = get_x_labels(mydat)) } #> lattice theme set by effectsTheme() #> See ?effectsTheme for details."},{"path":"https://strengejacke.github.io/ggeffects/reference/ggpredict.html","id":null,"dir":"Reference","previous_headings":"","what":"Marginal effects, adjusted predictions and estimated marginal means from regression models — ggeffect","title":"Marginal effects, adjusted predictions and estimated marginal means from regression models — ggeffect","text":"ggeffects package computes estimated marginal means (predicted values) response, margin specific values levels certain model terms, .e. generates predictions model holding non-focal variables constant varying focal variable(s). ggpredict() uses predict() generating predictions, ggeffect() computes marginal effects internally calling effects::Effect() ggemmeans() uses emmeans::emmeans(). result returned consistent data frame.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/ggpredict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Marginal effects, adjusted predictions and estimated marginal means from regression models — ggeffect","text":"","code":"ggeffect(model, terms, ci.lvl = 0.95, verbose = TRUE, ...)  ggemmeans(   model,   terms,   ci.lvl = 0.95,   type = \"fe\",   typical = \"mean\",   condition = NULL,   back.transform = TRUE,   interval = \"confidence\",   verbose = TRUE,   ... )  ggpredict(   model,   terms,   ci.lvl = 0.95,   type = \"fe\",   typical = \"mean\",   condition = NULL,   back.transform = TRUE,   ppd = FALSE,   vcov.fun = NULL,   vcov.type = NULL,   vcov.args = NULL,   interval = \"confidence\",   verbose = TRUE,   ... )  # S3 method for ggeffects as.data.frame(   x,   row.names = NULL,   optional = FALSE,   ...,   stringsAsFactors = FALSE,   terms_to_colnames = FALSE )"},{"path":"https://strengejacke.github.io/ggeffects/reference/ggpredict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marginal effects, adjusted predictions and estimated marginal means from regression models — ggeffect","text":"model fitted model object, list model objects. model supports common methods like predict(), family() model.frame() work. ggeffect(), model supported effects work, ggemmeans(), models supported emmeans work. terms Character vector, (named list formula) names terms model, predictions displayed. least one term required calculate effects certain terms, maximum length four terms, second fourth term indicate groups, .e. predictions first term grouped values levels remaining terms. terms missing NULL, adjusted predictions model term calculated. also possible define specific values terms, adjusted predictions calculated (see 'Details'). remaining covariates specified terms held constant (see 'Details'). See also arguments condition typical. ci.lvl Numeric, level confidence intervals. ggpredict(), use ci.lvl = NA, confidence intervals calculated (instance, due computation time). Typically, confidence intervals based standard errors returned predict() function returned, assuming normal distribution (.e. +/- 1.96 * SE). See introduction vignette details. verbose Toggle messages warnings. ... ggpredict(), arguments passed predict(); ggeffect(), arguments passed effects::Effect(); ggemmeans(), arguments passed emmeans::emmeans(). type = \"sim\", ... may also used set number simulation, e.g. nsim = 500. type Character, applies survival models, mixed effects models /models zero-inflation. Note: brmsfit-models zero-inflation component, type = \"zero_inflated\" type = \"zi_random\"; predicted values MixMod-models GLMMadaptive zero-inflation component always condition zero-inflation part model (see 'Details'). \"fixed\" (\"fe\" \"count\") Predicted values conditioned fixed effects conditional model (mixed models: predicted values population-level confidence intervals returned). instance, models fitted zeroinfl pscl, return predicted mean count component (without zero-inflation). models zero-inflation component, type calls predict(..., type = \"link\") (however, predicted values back-transformed response scale). \"random\" (\"re\") applies mixed models, type = \"random\" condition zero-inflation component model. type = \"random\" still returns population-level predictions, however, unlike type = \"fixed\", intervals also consider uncertainty variance parameters (mean random effect variance, see Johnson et al. 2014 details) hence can considered prediction intervals. models zero-inflation component, type calls predict(..., type = \"link\") (however, predicted values back-transformed response scale). get predicted values level random effects groups, add name related random effect term terms-argument (details, see vignette). \"zero_inflated\" (\"fe.zi\" \"zi\") Predicted values conditioned fixed effects zero-inflation component. instance, models fitted zeroinfl pscl, return predicted response (mu*(1-p)) glmmTMB, return expected value mu*(1-p) without conditioning random effects (.e. random effect variances taken account confidence intervals). models zero-inflation component, type calls predict(..., type = \"response\"). See 'Details'. \"zi_random\" (\"re.zi\" \"zero_inflated_random\") Predicted values conditioned zero-inflation component take random effects uncertainty account. models fitted glmmTMB(), hurdle() zeroinfl(), return expected value mu*(1-p). glmmTMB, prediction intervals also consider uncertainty random effects variances. type calls predict(..., type = \"response\"). See 'Details'. \"zi_prob\" (\"zi.prob\") Predicted zero-inflation probability. glmmTMB models zero-inflation component, type calls predict(..., type = \"zlink\"); models pscl call predict(..., type = \"zero\") GLMMadaptive, predict(..., type = \"zero_part\") called. \"simulate\" (\"sim\") Predicted values confidence resp. prediction intervals based simulations, .e. calls simulate(). type prediction takes model uncertainty account, including random effects variances. Currently supported models objects class lm, glm, glmmTMB, wbm, MixMod merMod. See ... details number simulations. \"survival\" \"cumulative_hazard\" (\"surv\" \"cumhaz\") Applies coxph-objects survial-package calculates survival probability cumulative hazard event. typical Character vector, naming function applied covariates effect \"averaged\". default \"mean\". See ?sjmisc::typical_value options. condition Named character vector, indicates covariates held constant specific values. Unlike typical, applies function covariates determine value used hold covariates constant, condition can used define exact values, instance condition = c(covariate1 = 20, covariate2 = 5). See 'Examples'. back.transform Logical, TRUE (default), predicted values log- log-log transformed responses back-transformed original response-scale. interval Type interval calculation, can either \"confidence\" (default) \"prediction\". May abbreviated. Unlike confidence intervals, prediction intervals include residual variance (sigma^2). argument ignored mixed models, interval = \"prediction\" equivalent type = \"random\" (interval = \"confidence\" equivalent type = \"fixed\"). Note prediction intervals available models, models work insight::get_sigma(). ppd Logical, TRUE, predictions Stan-models based posterior predictive distribution rstantools::posterior_predict(). FALSE (default), predictions based posterior draws linear predictor rstantools::posterior_linpred(). vcov.fun String, indicating name vcov*()-function sandwich clubSandwich-package, e.g. vcov.fun = \"vcovCL\", used compute (cluster) robust standard errors predictions. NULL, standard errors (confidence intervals) predictions based standard errors returned predict()-function. Note probably model objects work ggpredict() also supported sandwich clubSandwich-package. vcov.type Character vector, specifying estimation type robust covariance matrix estimation (see ?sandwich::vcovHC ?clubSandwich::vcovCR details). vcov.args List named vectors, used additional arguments passed vcov.fun. x object class ggeffects, returned ggpredict(), ggeffect() ggemmeans(). row.names NULL character vector giving row     names data frame.  Missing values allowed. optional logical. TRUE, setting row names     converting column names (syntactic names: see     make.names) optional.  Note R's     base package .data.frame() methods use     optional column names treatment, basically     meaning data.frame(*, check.names = !optional).     See also make.names argument matrix method. stringsAsFactors logical: character vector converted     factor? terms_to_colnames Logical, TRUE, standardized column names (like \"x\", \"group\" \"facet\") replaced variable names focal predictors specified terms.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/ggpredict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Marginal effects, adjusted predictions and estimated marginal means from regression models — ggeffect","text":"data frame (ggeffects class attribute) consistent data columns: \"x\": values first term terms, used x-position plots. \"predicted\": predicted values response, used y-position plots. \"std.error\": standard error predictions. Note standard errors always link-scale, back-transformed non-Gaussian models! \"conf.low\": lower bound confidence interval predicted values. \"conf.high\": upper bound confidence interval predicted values. \"group\": grouping level second term terms, used grouping-aesthetics plots. \"facet\": grouping level third term terms, used indicate facets plots. estimated marginal means (predicted values) always response scale! proportional odds logistic regression (see ?MASS::polr) resp. cumulative link models (e.g., see ?ordinal::clm), additional column \"response.level\" returned, indicates grouping predictions based level model's response. Note convenience reasons, columns intervals always named \"conf.low\" \"conf.high\", even though Bayesian models credible highest posterior density intervals returned.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/ggpredict.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Marginal effects, adjusted predictions and estimated marginal means from regression models — ggeffect","text":"Supported Models list supported models can found https://github.com/strengejacke/ggeffects. Support models varies function, .e. although ggpredict(), ggemmeans() ggeffect() support models, models supported exclusively one three functions. Difference ggpredict() ggeffect() ggemmeans() ggpredict() calls predict(), ggeffect() calls effects::Effect() ggemmeans() calls emmeans::emmeans() compute predicted values. Thus, effects returned ggpredict() can described conditional effects (.e. conditioned certain (reference) levels factors), ggemmeans() ggeffect() return marginal means, since effects \"marginalized\" (\"averaged\") levels factors (values character vectors). Therefore, ggpredict() ggeffect() resp. ggemmeans() differ factors character vectors held constant: ggpredict() uses reference level (\"lowest\" value case character vectors), ggeffect() ggemmeans() compute kind \"average\" value, represents proportions factor's category. Use condition set specific level factors ggemmeans(), factors averaged categories, held constant given level. Marginal Effects Adjusted Predictions Specific Values Specific values model terms can specified via terms-argument. Indicating levels square brackets allows selecting specific groups values resp. value ranges. Term name start levels brackets must separated whitespace character, e.g. terms = c(\"age\", \"education [1,3]\"). Numeric ranges, separated colon, also allowed: terms = c(\"education\", \"age [30:60]\"). stepsize range can adjusted using , e.g. terms = \"age [30:60 =5]\". terms-argument also supports shortcuts values-argument values_at(). terms = \"age [meansd]\" return predictions values one standard deviation mean age, mean age one SD mean age. terms = \"age [quart2]\" calculate predictions value lower, median upper quartile age. Furthermore, possible specify function name. Values predictions transformed, e.g. terms = \"income [exp]\". useful model predictors transformed fitting model back-transformed original scale predictions. also possible define functions (see vignette). Instead function, also possible define name variable specific values, e.g. define vector v = c(1000, 2000, 3000) use terms = \"income [v]\". can take random sample size sample=n, e.g terms = \"income [sample=8]\", sample eight values possible values variable income. option especially useful plotting predictions certain levels random effects group levels, group factor many levels can completely plotted. details, see vignette. Finally, numeric vectors specific values given, \"pretty range\" calculated (see pretty_range()), avoid memory allocation problems vectors many unique values. numeric vector specified second third term (.e. vector represents grouping structure), representative values (see values_at()) chosen (unless values specified). values numeric vector used compute predictions, may use e.g. terms = \"age []\". See also package vignettes. create pretty range smaller larger default range (.e. specific values given), use n-tag, e.g. terms=\"age [n=5]\" terms=\"age [n=12]\". Larger values n return larger range predicted values. Holding covariates constant values ggpredict(), expand.grid() called unique combinations model.frame(model)[, terms] used newdata-argument predict(). case, remaining covariates specified terms held constant: Numeric values set mean (unless changed condition typical-argument), integer values set median, factors set reference level (may also changed condition) character vectors mode (common element). ggeffect() ggemmeans(), default, set remaining numeric covariates mean value, factors, kind \"average\" value, represents proportions factor's category, used. applies character vectors: ggemmeans() averages distribution unique values character vector, similar factors treated. ggemmeans(), use condition set specific level factors averaged categories, held constant given level. Bayesian Regression Models ggpredict() also works Stan-models rstanarm brms-packages. predicted values median value drawn posterior samples. confidence intervals Stan-models Bayesian predictive intervals. default (.e. ppd = FALSE), predictions based rstantools::posterior_linpred() hence limitations: uncertainty error term taken account. recommendation use posterior predictive distribution (rstantools::posterior_predict()). Zero-Inflated Zero-Inflated Mixed Models brms Models class brmsfit always condition zero-inflation component, model component. Hence, type = \"zero_inflated\" type = \"zi_random\" brmsfit-models, predictions based draws posterior distribution, already account zero-inflation part model. Zero-Inflated Zero-Inflated Mixed Models glmmTMB model class glmmTMB, hurdle, zeroinfl zerotrunc, simulations multivariate normal distribution (see ?MASS::mvrnorm) drawn calculate mu*(1-p). Confidence intervals based quantiles results. type = \"zi_random\", prediction intervals also take uncertainty random-effect paramters account (see also Brooks et al. 2017, pp.391-392 details). alternative models fitted glmmTMB take model uncertainties account simulations based simulate(), used type = \"sim\" (see Brooks et al. 2017, pp.392-393 details). MixMod-models GLMMadaptive Predicted values fixed effects component (type = \"fixed\" type = \"zero_inflated\") based predict(..., type = \"mean_subject\"), predicted values random effects components (type = \"random\" type = \"zi_random\") calculated predict(..., type = \"subject_specific\") (see ?GLMMadaptive::predict.MixMod details). latter option requires response variable defined newdata-argument predict(), set typical value (see ?sjmisc::typical_value).","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/ggpredict.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Marginal effects, adjusted predictions and estimated marginal means from regression models — ggeffect","text":"Multinomial Models polr-, clm-models, generally speaking, models ordinal multinominal outcomes, additional column response.level, indicates level response variable predicted values associated. Printing Results print()-method gives clean output (especially predictions groups), indicates values covariates held constant. Furthermore, print()-method arguments digits n control number decimals lines printed, argument x.lab print factor-levels instead numeric values x factor. Limitations support models, example package MCMCglmm, rather experimental may fail certain models. encounter errors, please file issue https://github.com/strengejacke/ggeffects/issues.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/ggpredict.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Marginal effects, adjusted predictions and estimated marginal means from regression models — ggeffect","text":"Brooks , Kristensen K, Benthem KJ van, Magnusson , Berg CW, Nielsen , et al. glmmTMB Balances Speed Flexibility Among Packages Zero-inflated Generalized Linear Mixed Modeling. R Journal. 2017;9: 378-400. Johnson PC, O'Hara RB. 2014. Extension Nakagawa & Schielzeth's R2GLMM random slopes models. Methods Ecol Evol, 5: 944-946.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/ggpredict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Marginal effects, adjusted predictions and estimated marginal means from regression models — ggeffect","text":"","code":"library(sjlabelled) #>  #> Attaching package: ‘sjlabelled’ #> The following object is masked from ‘package:ggplot2’: #>  #>     as_label data(efc) fit <- lm(barthtot ~ c12hour + neg_c_7 + c161sex + c172code, data = efc)  ggpredict(fit, terms = \"c12hour\") #> # Predicted values of Total score BARTHEL INDEX #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>       0 |     75.44 | [73.25, 77.63] #>      20 |     70.38 | [68.56, 72.19] #>      45 |     64.05 | [62.39, 65.70] #>      65 |     58.98 | [57.15, 60.80] #>      85 |     53.91 | [51.71, 56.12] #>     105 |     48.85 | [46.14, 51.55] #>     125 |     43.78 | [40.51, 47.05] #>     170 |     32.38 | [27.73, 37.04] #>  #> Adjusted for: #> *  neg_c_7 = 11.84 #> *  c161sex =  1.76 #> * c172code =  1.97 ggpredict(fit, terms = c(\"c12hour\", \"c172code\")) #> # Predicted values of Total score BARTHEL INDEX #>  #> # c172code = low level of education #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>       0 |     74.75 | [71.26, 78.23] #>      30 |     67.15 | [64.03, 70.26] #>      55 |     60.81 | [57.77, 63.86] #>      85 |     53.22 | [49.95, 56.48] #>     115 |     45.62 | [41.86, 49.37] #>     170 |     31.69 | [26.59, 36.78] #>  #> # c172code = intermediate level of education #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>       0 |     75.46 | [73.28, 77.65] #>      30 |     67.87 | [66.16, 69.57] #>      55 |     61.53 | [59.82, 63.25] #>      85 |     53.93 | [51.72, 56.14] #>     115 |     46.34 | [43.35, 49.32] #>     170 |     32.40 | [27.74, 37.07] #>  #> # c172code = high level of education #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>       0 |     76.18 | [72.81, 79.55] #>      30 |     68.58 | [65.41, 71.76] #>      55 |     62.25 | [59.00, 65.50] #>      85 |     54.65 | [51.03, 58.27] #>     115 |     47.05 | [42.85, 51.26] #>     170 |     33.12 | [27.50, 38.74] #>  #> Adjusted for: #> * neg_c_7 = 11.84 #> * c161sex =  1.76 ggpredict(fit, terms = c(\"c12hour\", \"c172code\", \"c161sex\")) #> # Predicted values of Total score BARTHEL INDEX #>  #> # c172code = low level of education #> #  c161sex = [1] Male #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>       0 |     73.95 | [69.35, 78.56] #>      45 |     62.56 | [58.22, 66.89] #>      85 |     52.42 | [47.89, 56.96] #>     170 |     30.89 | [24.84, 36.95] #>  #> # c172code = intermediate level of education #> #  c161sex = [1] Male #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>       0 |     74.67 | [71.05, 78.29] #>      45 |     63.27 | [59.88, 66.67] #>      85 |     53.14 | [49.39, 56.89] #>     170 |     31.61 | [25.97, 37.25] #>  #> # c172code = high level of education #> #  c161sex = [1] Male #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>       0 |     75.39 | [71.03, 79.75] #>      45 |     63.99 | [59.72, 68.26] #>      85 |     53.86 | [49.22, 58.50] #>     170 |     32.33 | [25.94, 38.72] #>  #> # c172code = low level of education #> #  c161sex = [2] Female #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>       0 |     75.00 | [71.40, 78.59] #>      45 |     63.60 | [60.45, 66.74] #>      85 |     53.46 | [50.12, 56.80] #>     170 |     31.93 | [26.82, 37.05] #>  #> # c172code = intermediate level of education #> #  c161sex = [2] Female #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>       0 |     75.71 | [73.31, 78.12] #>      45 |     64.32 | [62.41, 66.22] #>      85 |     54.18 | [51.81, 56.56] #>     170 |     32.65 | [27.94, 37.37] #>  #> # c172code = high level of education #> #  c161sex = [2] Female #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>       0 |     76.43 | [72.88, 79.98] #>      45 |     65.03 | [61.67, 68.39] #>      85 |     54.90 | [51.15, 58.65] #>     170 |     33.37 | [27.69, 39.05] #>  #> Adjusted for: #> * neg_c_7 = 11.84  # specified as formula ggpredict(fit, terms = ~ c12hour + c172code + c161sex) #> # Predicted values of Total score BARTHEL INDEX #>  #> # c172code = low level of education #> #  c161sex = [1] Male #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>       0 |     73.95 | [69.35, 78.56] #>      45 |     62.56 | [58.22, 66.89] #>      85 |     52.42 | [47.89, 56.96] #>     170 |     30.89 | [24.84, 36.95] #>  #> # c172code = intermediate level of education #> #  c161sex = [1] Male #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>       0 |     74.67 | [71.05, 78.29] #>      45 |     63.27 | [59.88, 66.67] #>      85 |     53.14 | [49.39, 56.89] #>     170 |     31.61 | [25.97, 37.25] #>  #> # c172code = high level of education #> #  c161sex = [1] Male #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>       0 |     75.39 | [71.03, 79.75] #>      45 |     63.99 | [59.72, 68.26] #>      85 |     53.86 | [49.22, 58.50] #>     170 |     32.33 | [25.94, 38.72] #>  #> # c172code = low level of education #> #  c161sex = [2] Female #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>       0 |     75.00 | [71.40, 78.59] #>      45 |     63.60 | [60.45, 66.74] #>      85 |     53.46 | [50.12, 56.80] #>     170 |     31.93 | [26.82, 37.05] #>  #> # c172code = intermediate level of education #> #  c161sex = [2] Female #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>       0 |     75.71 | [73.31, 78.12] #>      45 |     64.32 | [62.41, 66.22] #>      85 |     54.18 | [51.81, 56.56] #>     170 |     32.65 | [27.94, 37.37] #>  #> # c172code = high level of education #> #  c161sex = [2] Female #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>       0 |     76.43 | [72.88, 79.98] #>      45 |     65.03 | [61.67, 68.39] #>      85 |     54.90 | [51.15, 58.65] #>     170 |     33.37 | [27.69, 39.05] #>  #> Adjusted for: #> * neg_c_7 = 11.84  # only range of 40 to 60 for variable 'c12hour' ggpredict(fit, terms = \"c12hour [40:60]\") #> # Predicted values of Total score BARTHEL INDEX #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>      40 |     65.31 | [63.66, 66.96] #>      43 |     64.55 | [62.90, 66.20] #>      45 |     64.05 | [62.39, 65.70] #>      47 |     63.54 | [61.88, 65.20] #>      50 |     62.78 | [61.11, 64.45] #>      53 |     62.02 | [60.33, 63.71] #>      55 |     61.51 | [59.80, 63.22] #>      60 |     60.25 | [58.49, 62.01] #>  #> Adjusted for: #> *  neg_c_7 = 11.84 #> *  c161sex =  1.76 #> * c172code =  1.97  # terms as named list ggpredict(fit, terms = list(c12hour = 40:60)) #> # Predicted values of Total score BARTHEL INDEX #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>      40 |     65.31 | [63.66, 66.96] #>      43 |     64.55 | [62.90, 66.20] #>      45 |     64.05 | [62.39, 65.70] #>      47 |     63.54 | [61.88, 65.20] #>      50 |     62.78 | [61.11, 64.45] #>      53 |     62.02 | [60.33, 63.71] #>      55 |     61.51 | [59.80, 63.22] #>      60 |     60.25 | [58.49, 62.01] #>  #> Adjusted for: #> *  neg_c_7 = 11.84 #> *  c161sex =  1.76 #> * c172code =  1.97  # covariate \"neg_c_7\" is held constant at a value of 11.84 (its mean value). # To use a different value, use \"condition\" ggpredict(fit, terms = \"c12hour [40:60]\", condition = c(neg_c_7 = 20)) #> # Predicted values of Total score BARTHEL INDEX #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>      40 |     46.56 | [42.58, 50.55] #>      43 |     45.80 | [41.84, 49.76] #>      45 |     45.30 | [41.35, 49.24] #>      47 |     44.79 | [40.86, 48.72] #>      50 |     44.03 | [40.11, 47.94] #>      53 |     43.27 | [39.37, 47.17] #>      55 |     42.76 | [38.87, 46.65] #>      60 |     41.50 | [37.62, 45.37] #>  #> Adjusted for: #> *  c161sex = 1.76 #> * c172code = 1.97  # to plot ggeffects-objects, you can use the 'plot()'-function. # the following examples show how to build your ggplot by hand.  if (FALSE) { # plot predicted values, remaining covariates held constant library(ggplot2) mydf <- ggpredict(fit, terms = \"c12hour\") ggplot(mydf, aes(x, predicted)) +   geom_line() +   geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1)  # three variables, so we can use facets and groups mydf <- ggpredict(fit, terms = c(\"c12hour\", \"c161sex\", \"c172code\")) ggplot(mydf, aes(x = x, y = predicted, colour = group)) +   stat_smooth(method = \"lm\", se = FALSE) +   facet_wrap(~facet, ncol = 2)  # select specific levels for grouping terms mydf <- ggpredict(fit, terms = c(\"c12hour\", \"c172code [1,3]\", \"c161sex\")) ggplot(mydf, aes(x = x, y = predicted, colour = group)) +   stat_smooth(method = \"lm\", se = FALSE) +   facet_wrap(~facet) +   labs(     y = get_y_title(mydf),     x = get_x_title(mydf),     colour = get_legend_title(mydf)   )  # level indication also works for factors with non-numeric levels # and in combination with numeric levels for other variables data(efc) efc$c172code <- sjlabelled::as_label(efc$c172code) fit <- lm(barthtot ~ c12hour + neg_c_7 + c161sex + c172code, data = efc) ggpredict(fit, terms = c(\"c12hour\",   \"c172code [low level of education, high level of education]\",   \"c161sex [1]\"))  # when \"terms\" is a named list ggpredict(fit, terms = list(   c12hour = seq(0, 170, 30),   c172code = c(\"low level of education\", \"high level of education\"),   c161sex = 1) )  # use categorical value on x-axis, use axis-labels, add error bars dat <- ggpredict(fit, terms = c(\"c172code\", \"c161sex\")) ggplot(dat, aes(x, predicted, colour = group)) +   geom_point(position = position_dodge(.1)) +   geom_errorbar(     aes(ymin = conf.low, ymax = conf.high),     position = position_dodge(.1)   ) +   scale_x_discrete(breaks = 1:3, labels = get_x_labels(dat))  # 3-way-interaction with 2 continuous variables data(efc) # make categorical efc$c161sex <- as_factor(efc$c161sex) fit <- lm(neg_c_7 ~ c12hour * barthtot * c161sex, data = efc) # select only levels 30, 50 and 70 from continuous variable Barthel-Index dat <- ggpredict(fit, terms = c(\"c12hour\", \"barthtot [30,50,70]\", \"c161sex\")) ggplot(dat, aes(x = x, y = predicted, colour = group)) +   stat_smooth(method = \"lm\", se = FALSE, fullrange = TRUE) +   facet_wrap(~facet) +   labs(     colour = get_legend_title(dat),     x = get_x_title(dat),     y = get_y_title(dat),     title = get_title(dat)   )  # or with ggeffects' plot-method plot(dat, ci = FALSE)}  # predictions for polynomial terms data(efc) fit <- glm(   tot_sc_e ~ c12hour + e42dep + e17age + I(e17age^2) + I(e17age^3),   data = efc,   family = poisson() ) ggeffect(fit, terms = \"e17age\") #> # Predicted counts of Services for elderly #>  #> e17age | Predicted |       95% CI #> --------------------------------- #>     64 |      1.37 | [1.04, 1.80] #>     70 |      0.94 | [0.84, 1.06] #>     74 |      0.90 | [0.80, 1.01] #>     78 |      0.94 | [0.85, 1.04] #>     84 |      1.04 | [0.94, 1.15] #>     90 |      1.01 | [0.88, 1.15] #>     94 |      0.82 | [0.65, 1.04] #>    104 |      0.17 | [0.04, 0.67]"},{"path":"https://strengejacke.github.io/ggeffects/reference/hypothesis_test.html","id":null,"dir":"Reference","previous_headings":"","what":"(Pairwise) comparisons between predictions — hypothesis_test","title":"(Pairwise) comparisons between predictions — hypothesis_test","text":"Function test differences adjusted predictions statistical significance. usually called contrasts (pairwise) comparisons.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/hypothesis_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Pairwise) comparisons between predictions — hypothesis_test","text":"","code":"hypothesis_test(model, ...)  # S3 method for default hypothesis_test(   model,   terms = NULL,   test = \"pairwise\",   equivalence = NULL,   p_adjust = NULL,   df = NULL,   ci.lvl = 0.95,   verbose = TRUE,   ... )  # S3 method for ggeffects hypothesis_test(   model,   test = \"pairwise\",   equivalence = NULL,   p_adjust = NULL,   df = NULL,   verbose = TRUE,   ... )"},{"path":"https://strengejacke.github.io/ggeffects/reference/hypothesis_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Pairwise) comparisons between predictions — hypothesis_test","text":"model fitted model object, object class ggeffects. ... Arguments passed data_grid() creating reference grid marginaleffects::predictions() resp. marginaleffects::slopes(). terms Character vector names focal terms model, contrasts comparisons displayed. least one term required, maximum length three terms. first focal term numeric, contrasts comparisons slopes numeric predictor computed (possibly grouped levels categorical focal predictors). test Hypothesis test. default, pairwise-comparisons conducted. See section Introduction contrasts pairwise comparisons. equivalence ROPE's lower higher bounds. \"default\" vector length two (e.g., c(-0.1, 0.1)). \"default\", bayestestR::rope_range() used. Instead using equivalence argument, also possible call equivalence_test() method directly. requires parameters package loaded. using equivalence_test(), two columns information ROPE coverage decision H0 added. Furthermore, possible plot() results equivalence_test(). See bayestestR::equivalence_test() resp. parameters::equivalence_test.lm() details. p_adjust Character vector, NULL, indicates method adjust p-values. See stats::p.adjust() details. possible adjustment methods \"tukey\" \"sidak\". caution necessary adjusting p-value multiple comparisons. See also section P-value adjustment . df Degrees freedom used compute p-values confidence intervals. NULL, degrees freedom extracted model using insight::get_df() type = \"wald\". ci.lvl Numeric, level confidence intervals. verbose Toggle messages warnings.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/hypothesis_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Pairwise) comparisons between predictions — hypothesis_test","text":"data frame containing predictions (e.g. test = NULL), contrasts pairwise comparisons adjusted predictions estimated marginal means.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/hypothesis_test.html","id":"introduction-into-contrasts-and-pairwise-comparisons","dir":"Reference","previous_headings":"","what":"Introduction into contrasts and pairwise comparisons","title":"(Pairwise) comparisons between predictions — hypothesis_test","text":"many ways test contrasts pairwise comparisons. detailed introduction many (visual) examples shown vignette.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/hypothesis_test.html","id":"p-value-adjustment-for-multiple-comparisons","dir":"Reference","previous_headings":"","what":"P-value adjustment for multiple comparisons","title":"(Pairwise) comparisons between predictions — hypothesis_test","text":"Note p-value adjustment methods supported p.adjust() (see also p.adjust.methods), row considered one set comparisons, matter test specified. , instance, hypothesis_test() returns eight rows predictions (test = NULL), p_adjust = \"bonferroni\", p-values adjusted way test pairwise comparisons (test = \"pairwise\") eight rows comparisons returned. methods \"tukey\" \"sidak\", rank adjustment done based number combinations levels focal predictors terms. Thus, latter two methods may useful certain tests , particular pairwise comparisons.","code":""},{"path":[]},{"path":"https://strengejacke.github.io/ggeffects/reference/hypothesis_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Pairwise) comparisons between predictions — hypothesis_test","text":"","code":"if (FALSE) { if (requireNamespace(\"marginaleffects\") && interactive()) {   data(efc)   efc$c172code <- as.factor(efc$c172code)   efc$c161sex <- as.factor(efc$c161sex)   levels(efc$c161sex) <- c(\"male\", \"female\")   m <- lm(barthtot ~ c12hour + neg_c_7 + c161sex + c172code, data = efc)    # direct computation of comparisons   hypothesis_test(m, \"c172code\")    # passing a `ggeffects` object   pred <- ggpredict(m, \"c172code\")   hypothesis_test(pred)    # test for slope   hypothesis_test(m, \"c12hour\")    # interaction - contrasts by groups   m <- lm(barthtot ~ c12hour + c161sex * c172code + neg_c_7, data = efc)   hypothesis_test(m, c(\"c161sex\", \"c172code\"), test = NULL)    # interaction - pairwise comparisons by groups   hypothesis_test(m, c(\"c161sex\", \"c172code\"))    # p-value adjustment   hypothesis_test(m, c(\"c161sex\", \"c172code\"), p_adjust = \"tukey\")    # specific comparisons   hypothesis_test(m, c(\"c161sex\", \"c172code\"), test = \"b2 = b1\")    # interaction - slope by groups   m <- lm(barthtot ~ c12hour + neg_c_7 * c172code + c161sex, data = efc)   hypothesis_test(m, c(\"neg_c_7\", \"c172code\")) } }"},{"path":"https://strengejacke.github.io/ggeffects/reference/install_latest.html","id":null,"dir":"Reference","previous_headings":"","what":"Update latest ggeffects-version from R-universe (GitHub) or CRAN — install_latest","title":"Update latest ggeffects-version from R-universe (GitHub) or CRAN — install_latest","text":"function can used install latest package version ggeffects, either development version (R-universe/GitHub) current version CRAN.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/install_latest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update latest ggeffects-version from R-universe (GitHub) or CRAN — install_latest","text":"","code":"install_latest(   source = c(\"development\", \"cran\"),   force = FALSE,   verbose = TRUE )"},{"path":"https://strengejacke.github.io/ggeffects/reference/install_latest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update latest ggeffects-version from R-universe (GitHub) or CRAN — install_latest","text":"source Character. Either \"development\" \"cran\". \"cran\", ggeffects installed default CRAN mirror returned getOption(\"repos\")['CRAN']. \"development\" (default), ggeffects installed r-universe repository (https://strengejacke.r-universe.dev/). force Logical, FALSE, update installed newer version available. Use force=TRUE force installation, even version number locally installed package identical latest development-version. applies source=\"development\". verbose Toggle messages.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/install_latest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update latest ggeffects-version from R-universe (GitHub) or CRAN — install_latest","text":"Invisible NULL.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/install_latest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update latest ggeffects-version from R-universe (GitHub) or CRAN — install_latest","text":"","code":"if (FALSE) { # install latest development-version of ggeffects from the # r-universe repository install_latest() }"},{"path":"https://strengejacke.github.io/ggeffects/reference/lung2.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data set — lung2","title":"Sample data set — lung2","text":"sample data set, used tests examples survival models. dataset originally included survival package, convenience reasons also available package.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/new_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame from all combinations of predictor values — new_data","title":"Create a data frame from all combinations of predictor values — new_data","text":"Create data frame \"newdata\"-argument contains combinations values terms questions. Similar expand.grid(). terms-argument accepts shortcuts representative values ggpredict().","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/new_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame from all combinations of predictor values — new_data","text":"","code":"new_data(model, terms, typical = \"mean\", condition = NULL, ...)  data_grid(model, terms, typical = \"mean\", condition = NULL, ...)"},{"path":"https://strengejacke.github.io/ggeffects/reference/new_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame from all combinations of predictor values — new_data","text":"model fitted model object. terms Character vector names terms model combinations values created. typical Character vector, naming function applied covariates effect \"averaged\". default \"mean\". See ?sjmisc::typical_value options. condition Named character vector, indicates covariates held constant specific values. Unlike typical, applies function covariates determine value used hold covariates constant, condition can used define exact values, instance condition = c(covariate1 = 20, covariate2 = 5). See 'Examples'. ... Currently used.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/new_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame from all combinations of predictor values — new_data","text":"data frame containing one row combination values supplied variables.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/new_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a data frame from all combinations of predictor values — new_data","text":"","code":"data(efc) fit <- lm(barthtot ~ c12hour + neg_c_7 + c161sex + c172code, data = efc) new_data(fit, c(\"c12hour [meansd]\", \"c161sex\")) #>   c12hour c161sex  neg_c_7 c172code #> 1    -8.3       1 11.83804 1.970552 #> 2    42.2       1 11.83804 1.970552 #> 3    92.7       1 11.83804 1.970552 #> 4    -8.3       2 11.83804 1.970552 #> 5    42.2       2 11.83804 1.970552 #> 6    92.7       2 11.83804 1.970552  nd <- new_data(fit, c(\"c12hour [meansd]\", \"c161sex\")) pr <- predict(fit, type = \"response\", newdata = nd) nd$predicted <- pr nd #>   c12hour c161sex  neg_c_7 c172code predicted #> 1    -8.3       1 11.83804 1.970552  76.75375 #> 2    42.2       1 11.83804 1.970552  63.96204 #> 3    92.7       1 11.83804 1.970552  51.17033 #> 4    -8.3       2 11.83804 1.970552  77.79518 #> 5    42.2       2 11.83804 1.970552  65.00347 #> 6    92.7       2 11.83804 1.970552  52.21175  # compare to ggpredict(fit, c(\"c12hour [meansd]\", \"c161sex\")) #> # Predicted values of Total score BARTHEL INDEX #>  #> # c161sex = Male #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>   -8.30 |     76.75 | [73.02, 80.49] #>   42.20 |     63.96 | [60.57, 67.35] #>   92.70 |     51.17 | [47.30, 55.04] #>  #> # c161sex = Female #>  #> c12hour | Predicted |         95% CI #> ------------------------------------ #>   -8.30 |     77.80 | [75.20, 80.39] #>   42.20 |     65.00 | [63.11, 66.90] #>   92.70 |     52.21 | [49.68, 54.74] #>  #> Adjusted for: #> *  neg_c_7 = 11.84 #> * c172code =  1.97"},{"path":"https://strengejacke.github.io/ggeffects/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot ggeffects-objects — plot","title":"Plot ggeffects-objects — plot","text":"generic plot-method ggeffects-objects.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot ggeffects-objects — plot","text":"","code":"# S3 method for ggeffects plot(   x,   ci = TRUE,   ci.style = c(\"ribbon\", \"errorbar\", \"dash\", \"dot\"),   facets,   add.data = FALSE,   limit.range = FALSE,   residuals = FALSE,   residuals.line = FALSE,   collapse.group = FALSE,   colors = \"Set1\",   alpha = 0.15,   dodge = 0.25,   use.theme = TRUE,   dot.alpha = 0.35,   jitter = 0.2,   log.y = FALSE,   case = NULL,   show.legend = TRUE,   show.title = TRUE,   show.x.title = TRUE,   show.y.title = TRUE,   dot.size = NULL,   line.size = NULL,   connect.lines = FALSE,   grid,   one.plot = TRUE,   rawdata,   ... )  theme_ggeffects(base_size = 11, base_family = \"\")  show_pals()"},{"path":"https://strengejacke.github.io/ggeffects/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot ggeffects-objects — plot","text":"x object class ggeffects, returned functions package. ci Logical, TRUE, confidence bands (continuous variables x-axis) resp. error bars (factors x-axis) plotted. ci.style Character vector, indicating style confidence bands. May either \"ribbon\", \"errorbar\", \"dash\" \"dot\", plot ribbon, error bars, dashed dotted lines confidence bands. facets, grid Logical, defaults TRUE, x column named facet, defaults FALSE, x column. Set facets = TRUE wrap plot facets even grouping variables (see 'Examples'). grid alias facets. add.data, rawdata Logical, TRUE, layer raw data response predictor x-axis, plotted point-geoms, added plot. limit.range Logical, TRUE, limits range prediction bands range data. residuals Logical, TRUE, layer partial residuals added plot. See vignette Effect Displays Partial Residuals. effects details partial residual plots. residuals.line Logical, TRUE, loess-fit line added partial residuals plot. applies residuals TRUE. collapse.group mixed effects models, name grouping variable random effects. collapse.group = TRUE, data points \"collapsed\" first random effect groups added plot. Else, collapse.group name group factor, data collapsed specific random effect. See collapse_by_group() details. colors Character vector color values hex-format, valid color value names (see demo(\"colors\")) name ggeffects-color-palette. Following options valid colors: specified, color brewer palette \"Set1\" used. \"gs\", greyscale used. \"bw\", plot black/white uses different line types distinguish groups. pre-defined color-palettes package can used, e.g. colors = \"metro\". See show_pals() show available palettes. Else specify color values names vector (e.g. colors = c(\"#f00000\", \"#00ff00\")). alpha Alpha value confidence bands. dodge Value offsetting shifting error bars, avoid overlapping. applies, factor plotted x-axis (cases, confidence bands replaced error bars automatically), ci.style = \"errorbars\". use.theme Logical, TRUE, slightly tweaked version ggplot's minimal-theme, theme_ggeffects(), applied plot. FALSE, theme-modifications applied. dot.alpha Alpha value data points, add.data = TRUE. jitter Numeric, 0 1. NULL add.data = TRUE, adds small amount random variation location data points dots, avoid overplotting. Hence points reflect exact values data. May also numeric vector length two, add different horizontal vertical jittering. binary outcomes, raw data jittered default avoid data points exceed axis limits. log.y Logical, TRUE, y-axis scale log-transformed. might useful binomial models predicted probabilities y-axis. case Desired target case. Labels automatically converted specified character case. See ?sjlabelled::convert_case details argument. show.legend Logical, shows hides plot legend. show.title Logical, shows hides plot title- show.x.title Logical, shows hides plot title x-axis. show.y.title Logical, shows hides plot title y-axis. dot.size Numeric, size point geoms. line.size Numeric, size line geoms. connect.lines Logical, TRUE plot point-geoms error bars (usually case x-axis discrete), points groups connected line. one.plot Logical, TRUE x panel column (.e. four terms used), single, integrated plot produced. ... arguments passed ggplot::scale_y*(), control appearance y-axis. base_size Base font size. base_family Base font family.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot ggeffects-objects — plot","text":"ggplot2-object.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot ggeffects-objects — plot","text":"proportional odds logistic regression (see ?MASS::polr) cumulative link models general, plots automatically facetted response.level, indicates grouping predictions based level model's response.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/plot.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot ggeffects-objects — plot","text":"Load library(ggplot2) use theme_set(theme_ggeffects()) set ggeffects-theme default plotting theme. can use plot-modifiers, e.g. sjPlot, like legend_style() font_size() without losing theme-modifications. pre-defined colour palettes package. Use show_pals() show available colour palettes.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/plot.html","id":"partial-residuals","dir":"Reference","previous_headings":"","what":"Partial Residuals","title":"Plot ggeffects-objects — plot","text":"generalized linear models (glms), residualized scores computed inv.link(link(Y) + r) Y predicted values response scale, r working residuals.  (generalized) linear mixed models, random effect also partialled .","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot ggeffects-objects — plot","text":"","code":"library(sjlabelled) data(efc) efc$c172code <- as_label(efc$c172code) fit <- lm(barthtot ~ c12hour + neg_c_7 + c161sex + c172code, data = efc)  dat <- ggpredict(fit, terms = \"c12hour\") plot(dat)   # \\donttest{ # facet by group, use pre-defined color palette dat <- ggpredict(fit, terms = c(\"c12hour\", \"c172code\")) plot(dat, facet = TRUE, colors = \"hero\")   # don't use facets, b/w figure, w/o confidence bands dat <- ggpredict(fit, terms = c(\"c12hour\", \"c172code\")) plot(dat, colors = \"bw\", ci = FALSE)   # factor at x axis, plot exact data points and error bars dat <- ggpredict(fit, terms = c(\"c172code\", \"c161sex\")) plot(dat)   # for three variables, automatic facetting dat <- ggpredict(fit, terms = c(\"c12hour\", \"c172code\", \"c161sex\")) plot(dat)# }   # show all color palettes show_pals()"},{"path":"https://strengejacke.github.io/ggeffects/reference/pool_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Pool Predictions or Estimated Marginal Means — pool_predictions","title":"Pool Predictions or Estimated Marginal Means — pool_predictions","text":"function \"pools\" (.e. combines) multiple ggeffects objects, similar fashion mice::pool().","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/pool_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pool Predictions or Estimated Marginal Means — pool_predictions","text":"","code":"pool_predictions(x, ...)"},{"path":"https://strengejacke.github.io/ggeffects/reference/pool_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pool Predictions or Estimated Marginal Means — pool_predictions","text":"x list ggeffects objects, returned ggpredict(), ggemmeans() ggeffect(). ... Currently used.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/pool_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pool Predictions or Estimated Marginal Means — pool_predictions","text":"data frame pooled predictions.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/pool_predictions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pool Predictions or Estimated Marginal Means — pool_predictions","text":"Averaging parameters follows Rubin's rules (Rubin, 1987, p. 76).","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/pool_predictions.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Pool Predictions or Estimated Marginal Means — pool_predictions","text":"Rubin, D.B. (1987). Multiple Imputation Nonresponse Surveys. New York: John Wiley Sons.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/pool_predictions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pool Predictions or Estimated Marginal Means — pool_predictions","text":"","code":"# example for multiple imputed datasets if (require(\"mice\")) {   data(\"nhanes2\")   imp <- mice(nhanes2, printFlag = FALSE)   predictions <- lapply(1:5, function(i) {     m <- lm(bmi ~ age + hyp + chl, data = complete(imp, action = i))     ggpredict(m, \"age\")   })   pool_predictions(predictions) } #> Loading required package: mice #>  #> Attaching package: ‘mice’ #> The following object is masked from ‘package:stats’: #>  #>     filter #> The following objects are masked from ‘package:base’: #>  #>     cbind, rbind #> # Predicted values of bmi #>  #> age   | Predicted |         95% CI #> ---------------------------------- #> 20-39 |     30.37 | [28.19, 32.55] #> 40-59 |     24.07 | [20.98, 27.17] #> 60-99 |     22.10 | [18.34, 25.87] #>  #> Adjusted for: #> * hyp =     no #> * chl = 195.58"},{"path":"https://strengejacke.github.io/ggeffects/reference/pretty_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a pretty sequence over a range of a vector — pretty_range","title":"Create a pretty sequence over a range of a vector — pretty_range","text":"Creates evenly spaced, pretty sequence numbers range vector.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/pretty_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a pretty sequence over a range of a vector — pretty_range","text":"","code":"pretty_range(x, n = NULL, length = NULL)"},{"path":"https://strengejacke.github.io/ggeffects/reference/pretty_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a pretty sequence over a range of a vector — pretty_range","text":"x numeric vector. n Numeric value, indicating size many values used create pretty sequence. x large value range (> 100), n something 1 5. x rather small amount unique values, n something 10 20. n = NULL, pretty_range() automatically tries find pretty sequence. length Integer value, alternative n, defines number intervals returned.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/pretty_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a pretty sequence over a range of a vector — pretty_range","text":"numeric vector range corresponding minimum maximum values x. x missing, function, pre-programmed n length returned. See examples.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/pretty_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a pretty sequence over a range of a vector — pretty_range","text":"","code":"data(iris) # pretty range for vectors with decimal points pretty_range(iris$Petal.Length) #>  [1] 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 6.5 7.0  # pretty range for large range, increasing by 50 pretty_range(1:1000) #>  [1]    0   50  100  150  200  250  300  350  400  450  500  550  600  650  700 #> [16]  750  800  850  900  950 1000  # increasing by 20 pretty_range(1:1000, n = 7) #>  [1]    0   20   40   60   80  100  120  140  160  180  200  220  240  260  280 #> [16]  300  320  340  360  380  400  420  440  460  480  500  520  540  560  580 #> [31]  600  620  640  660  680  700  720  740  760  780  800  820  840  860  880 #> [46]  900  920  940  960  980 1000  # return 10 intervals pretty_range(1:1000, length = 10) #>  [1]    0  100  200  300  400  500  600  700  800  900 1000  # same result pretty_range(1:1000, n = 2.5) #>  [1]    0  100  200  300  400  500  600  700  800  900 1000  # function factory range_n_5 <- pretty_range(n = 5) range_n_5(1:1000) #>  [1]    0   50  100  150  200  250  300  350  400  450  500  550  600  650  700 #> [16]  750  800  850  900  950 1000"},{"path":"https://strengejacke.github.io/ggeffects/reference/residualize_over_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute partial residuals from a data grid — residualize_over_grid","title":"Compute partial residuals from a data grid — residualize_over_grid","text":"function computes partial residuals based data grid, data grid usually data frame combinations factor variables certain values numeric vectors. data grid usually used newdata argument predict(), can created new_data().","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/residualize_over_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute partial residuals from a data grid — residualize_over_grid","text":"","code":"residualize_over_grid(grid, model, ...)  # S3 method for data.frame residualize_over_grid(grid, model, pred_name, ...)  # S3 method for ggeffects residualize_over_grid(grid, model, protect_names = TRUE, ...)"},{"path":"https://strengejacke.github.io/ggeffects/reference/residualize_over_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute partial residuals from a data grid — residualize_over_grid","text":"grid data frame representing data grid, object class ggeffects, returned ggpredict() others. model model compute partial residuals. data grid grid match predictors model. ... Currently used. pred_name name focal predictor, partial residuals computed. protect_names Logical, TRUE, preserves column names ggeffects objects used grid.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/residualize_over_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute partial residuals from a data grid — residualize_over_grid","text":"data frame residuals focal predictor.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/residualize_over_grid.html","id":"partial-residuals","dir":"Reference","previous_headings":"","what":"Partial Residuals","title":"Compute partial residuals from a data grid — residualize_over_grid","text":"generalized linear models (glms), residualized scores computed inv.link(link(Y) + r) Y predicted values response scale, r working residuals.  (generalized) linear mixed models, random effect also partialled .","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/residualize_over_grid.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute partial residuals from a data grid — residualize_over_grid","text":"Fox J, Weisberg S. Visualizing Fit Lack Fit Complex Regression Models Predictor Effect Plots Partial Residuals. Journal Statistical Software 2018;87.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/residualize_over_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute partial residuals from a data grid — residualize_over_grid","text":"","code":"library(ggeffects) set.seed(1234) x <- rnorm(200) z <- rnorm(200) # quadratic relationship y <- 2 * x + x^2 + 4 * z + rnorm(200)  d <- data.frame(x, y, z) model <- lm(y ~ x + z, data = d)  pr <- ggpredict(model, c(\"x [all]\", \"z\")) head(residualize_over_grid(pr, model)) #>          x group predicted #> 53  -1.207  0.07 -1.797239 #> 402  0.277  1.08  4.888712 #> 518  1.084  0.07  3.232202 #> 9   -2.346  1.08  4.133561 #> 428  0.429  0.07  1.801594 #> 441  0.506  1.08  5.659527"},{"path":"https://strengejacke.github.io/ggeffects/reference/values_at.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate representative values of a vector — values_at","title":"Calculate representative values of a vector — values_at","text":"function calculates representative values vector, like minimum/maximum values lower, median upper quartile etc., can used numeric vectors plot marginal effects representative values.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/values_at.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate representative values of a vector — values_at","text":"","code":"values_at(x, values = \"meansd\")  representative_values(x, values = \"meansd\")"},{"path":"https://strengejacke.github.io/ggeffects/reference/values_at.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate representative values of a vector — values_at","text":"x numeric vector. values Character vector, naming pattern representative values calculcated. \"minmax\": (default) minimum maximum values (lower upper bounds) moderator used plot interaction independent variable moderator. \"meansd\": uses mean value moderator well one standard deviation mean value plot effect moderator independent variable. \"zeromax\": similar \"minmax\" option, however, 0 always used minimum value moderator. may useful predictors empirical zero-value, absence moderation simulated using 0 minimum. \"fivenum\": calculates uses Tukey's five number summary (minimum, lower-hinge, median, upper-hinge, maximum) moderator value. \"quart\": calculates uses quartiles (lower, median upper) moderator value, including minimum maximum value. \"quart2\": calculates uses quartiles (lower, median upper) moderator value, excluding minimum maximum value. \"terciles\": calculates uses terciles (lower upper third) moderator value, including minimum maximum value. \"terciles2\": calculates uses terciles (lower upper third) moderator value, excluding minimum maximum value. \"\": uses values moderator variable. Note option applies type = \"eff\", numeric moderator values.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/values_at.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate representative values of a vector — values_at","text":"numeric vector length two three, representing required values x, like minimum/maximum value mean +/- 1 SD. x missing, function, pre-programmed n length returned. See examples.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/values_at.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate representative values of a vector — values_at","text":"","code":"data(efc) values_at(efc$c12hour) #> [1] -8.4 42.4 93.2 values_at(efc$c12hour, \"quart2\") #> [1] 10.0 20.0 42.8  mean_sd <- values_at(values = \"meansd\") mean_sd(efc$c12hour) #> [1] -8.4 42.4 93.2"},{"path":"https://strengejacke.github.io/ggeffects/reference/vcov.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate variance-covariance matrix for marginal effects — vcov","title":"Calculate variance-covariance matrix for marginal effects — vcov","text":"Returns variance-covariance matrix predicted values object.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/vcov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate variance-covariance matrix for marginal effects — vcov","text":"","code":"# S3 method for ggeffects vcov(object, vcov.fun = NULL, vcov.type = NULL, vcov.args = NULL, ...)"},{"path":"https://strengejacke.github.io/ggeffects/reference/vcov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate variance-covariance matrix for marginal effects — vcov","text":"object object class \"ggeffects\", returned ggpredict(). vcov.fun String, indicating name vcov*()-function sandwich clubSandwich-package, e.g. vcov.fun = \"vcovCL\", used compute (cluster) robust standard errors predictions. NULL, standard errors (confidence intervals) predictions based standard errors returned predict()-function. Note probably model objects work ggpredict() also supported sandwich clubSandwich-package. vcov.type Character vector, specifying estimation type robust covariance matrix estimation (see ?sandwich::vcovHC ?clubSandwich::vcovCR details). vcov.args List named vectors, used additional arguments passed vcov.fun. ... Currently used.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/vcov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate variance-covariance matrix for marginal effects — vcov","text":"variance-covariance matrix predicted values object.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/vcov.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate variance-covariance matrix for marginal effects — vcov","text":"returned matrix many rows (columns) possible combinations predicted values ggpredict() call. example, two variables terms-argument ggpredict() 3 4 levels , 3*4 combinations predicted values, returned matrix 12x12 dimension. short, nrow(object) always equal nrow(vcov(object)). See also 'Examples'.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/vcov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate variance-covariance matrix for marginal effects — vcov","text":"","code":"data(efc) model <- lm(barthtot ~ c12hour + neg_c_7 + c161sex + c172code, data = efc) result <- ggpredict(model, c(\"c12hour [meansd]\", \"c161sex\"))  vcov(result) #>             1           2            3            4           5           6 #> 1  3.62642428  0.71518593  2.922676591  0.011438238  2.21892890 -0.69230945 #> 2  0.71518593  1.74243837 -0.073477976  0.953774462 -0.86214188  0.16511056 #> 3  2.92267659 -0.07347798  2.987294098 -0.008860469  3.05191160  0.05575704 #> 4  0.01143824  0.95377446 -0.008860469  0.933475755 -0.02915918  0.91317705 #> 5  2.21892890 -0.86214188  3.051911604 -0.029159177  3.88489431  0.80382353 #> 6 -0.69230945  0.16511056  0.055757037  0.913177047  0.80382353  1.66124354  # compare standard errors sqrt(diag(vcov(result))) #>         1         2         3         4         5         6  #> 1.9043173 1.3200145 1.7283790 0.9661655 1.9710135 1.2888924  as.data.frame(result) #>      x predicted std.error conf.low conf.high  group #> 1 -8.3  76.75375 1.9043173 73.01577  80.49173   Male #> 2 -8.3  77.79518 1.3200145 75.20412  80.38623 Female #> 3 42.2  63.96204 1.7283790 60.56941  67.35467   Male #> 4 42.2  65.00347 0.9661655 63.10698  66.89995 Female #> 5 92.7  51.17033 1.9710135 47.30143  55.03923   Male #> 6 92.7  52.21175 1.2888924 49.68179  54.74172 Female  # only two predicted values, no further terms # vcov() returns a 2x2 matrix result <- ggpredict(model, \"c161sex\") vcov(result) #>              1            2 #> 1  2.987290958 -0.008861546 #> 2 -0.008861546  0.933476742  # 2 levels for c161sex multiplied by 3 levels for c172code # result in 6 combinations of predicted values # thus vcov() returns a 6x6 matrix result <- ggpredict(model, c(\"c161sex\", \"c172code\")) vcov(result) #>             1            2           3           4            5           6 #> 1  4.87803294  3.024738355  1.17144377  1.76091479 -0.092379792 -1.94567437 #> 2  3.02473835  2.983277938  2.94181752  0.03225611 -0.009204306 -0.05066472 #> 3  1.17144377  2.941817522  4.71219127 -1.69640257  0.073971180  1.84434493 #> 4  1.76091479  0.032256111 -1.69640257  2.58228744  0.853628756 -0.87502993 #> 5 -0.09237979 -0.009204306  0.07397118  0.85362876  0.936804241  1.01997973 #> 6 -1.94567437 -0.050664722  1.84434493 -0.87502993  1.019979727  2.91498938"},{"path":[]},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-1-2-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 1.2.2","text":"Fixed issue misplaced residuals x-axis categorical factor levels alphabetical order. pool_predictions() now correctly handles models transformed response variables (like log(y)) returns correct back-transformed pooled predictions (confidence intervals). Fixed issue wrong computation confidence intervals models class clm package ordinal. Fixed failing tests due changes logistf package, now also supports emmeans. means, ggemmeans() now also works models package logistf. Fixed bug plot() partial residuals added (.e. residuals = TRUE) collapse.group provided (case mixed models).","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-121","dir":"Changelog","previous_headings":"","what":"ggeffects 1.2.1","title":"ggeffects 1.2.1","text":"CRAN release: 2023-04-02","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-2-1","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.2.1","text":"Support mblogit (mclogit), phylolm phyloglm (phylolm) models.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"changes-to-functions-1-2-1","dir":"Changelog","previous_headings":"","what":"Changes to functions","title":"ggeffects 1.2.1","text":"hypothesis_test() gains equivalence argument, compute tests practical equivalence contrasts comparisons. message whether contrasts comparisons hypothesis_test() link-scale now printed table. Dot arguments (...) hypothesis_test() now passed functions marginaleffects, thereby allowing use options functions marginaleffects::predictions(), like transform_post etc.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-1-2-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 1.2.1","text":"Fixed issues hypothesis_test() mixed models one focal term , term categorical.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-120","dir":"Changelog","previous_headings":"","what":"ggeffects 1.2.0","title":"ggeffects 1.2.0","text":"CRAN release: 2023-02-24","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"breaking-1-2-0","dir":"Changelog","previous_headings":"","what":"Breaking","title":"ggeffects 1.2.0","text":"Confidence intervals adjusted predictions now take model’s degrees freedom account, thereby leading slightly larger intervals models infinite degrees freedom (like linear models t-statistic).","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-functions-1-2-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"ggeffects 1.2.0","text":"hypothesis_test(), compute contrasts comparisons predictions test differences statistical significance. Additionally, accompanying vignette explains new function detail added. install_latest(), install latest official package version CRAN, latest development version r-universe. .data.frame() method added, converts ggeffects objects returned ggpredict() data frame, standard column names replaced related variable names.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-2-0","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.2.0","text":"Response values now also back-transformed transformed using log2(), log10() log1p(). terms argument can now also named list. Thus, instead terms = c(\"score [30,50,70]\", \"status [low, middle]\") one also write terms = list(score = c(30,50,70), status = c(\"low\", \"middle\")).","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-115","dir":"Changelog","previous_headings":"","what":"ggeffects 1.1.5","title":"ggeffects 1.1.5","text":"CRAN release: 2023-01-25","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-1-5","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.1.5","text":"Minor changes meet forthcoming update insight. ggpredict() ggemmeans() get verbose argument suppress messages warnings calling","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-114","dir":"Changelog","previous_headings":"","what":"ggeffects 1.1.4","title":"ggeffects 1.1.4","text":"CRAN release: 2022-10-23","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-1-4","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.1.4","text":"Reduced package dependencies. Packages sjlabelled MASS moved imports suggests. ggeffects now lightweight package compute adjusted predictions estimated marginal means.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-supported-models-1-1-4","dir":"Changelog","previous_headings":"","what":"New supported models","title":"ggeffects 1.1.4","text":"logitr (package logitr)","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-1-1-4","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 1.1.4","text":"Fixed issue wrong standard errors predicting random effect groups multiple levels. Fixed issue ggemmeans(), correctly averaged character vectors hold constant. Fixed bug models class lme type = \"re\" requested.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-113","dir":"Changelog","previous_headings":"","what":"ggeffects 1.1.3","title":"ggeffects 1.1.3","text":"CRAN release: 2022-08-07","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-1-1-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 1.1.3","text":"Fix wrong computations predictions arm::bayesglm() models. Fix CRAN check issues.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-112","dir":"Changelog","previous_headings":"","what":"ggeffects 1.1.2","title":"ggeffects 1.1.2","text":"CRAN release: 2022-04-10","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-1-2","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.1.2","text":"Speed improvement models calculating uncertainty intervals predictions. Minor fixes.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-111","dir":"Changelog","previous_headings":"","what":"ggeffects 1.1.1","title":"ggeffects 1.1.1","text":"CRAN release: 2021-07-29","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"changes-to-functions-1-1-1","dir":"Changelog","previous_headings":"","what":"Changes to functions","title":"ggeffects 1.1.1","text":"Add informative error message brmsfit models using mo() numeric predictors, allow predict values actually present data.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-1-1-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 1.1.1","text":"Fixed issue adding raw data points plots logistic regression models, response variable factor numeric levels. Fixed issues CRAN checks.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-110","dir":"Changelog","previous_headings":"","what":"ggeffects 1.1.0","title":"ggeffects 1.1.0","text":"CRAN release: 2021-04-30","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-supported-models-1-1-0","dir":"Changelog","previous_headings":"","what":"New supported models","title":"ggeffects 1.1.0","text":"orm (package rms)","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"breaking-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"ggeffects 1.1.0","text":"Prediction intervals (possible, type = \"random\"), now always based sigma^2 (.e. insight::get_sigma(model)^2). line interval = \"prediction\" lm, predictions based simulations (type = \"simulate\"). print() now uses name focal variable column name (instead) \"x\").","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-function-1-1-0","dir":"Changelog","previous_headings":"","what":"New function","title":"ggeffects 1.1.0","text":"collapse_by_group(), generate data frame response value raw data averaged levels (random effect) grouping factor.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-1-0","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.1.0","text":"new vignette added related definition meaning “marginal effects” “adjusted predictions”. strict avoid confusion term “marginal effect”, meaning may vary across fields, either “marginal effects” replaced “adjusted predictions”, “adjusted predictions” added term throughout package’s documentation vignettes. Allow confidence intervals predictions conditioned random effect groups (.e. type = \"random\" terms includes random effect group factor). Predicted response values based simulate() (.e. type = \"simulate\") now possible model classes (see ?ggpredict). ggpredict() now computes confidence intervals edge cases previously failed (e.g. models compute standard errors predictions, factor included model focal term). plot() gains collapse.group argument, - conjunction add.data - averages (“collapses”) raw data levels group factors (random effects). data_grid() added common alias new_data().","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 1.1.0","text":"ggpredict() plot() survival-models now always start time = 1. Fixed issue print() survival-models. Fixed issue type = \"simulate\" glmmTMB models. Fixed issue gamlss models random() function model formula. Fixed issue incorrect back-transformation predictions geeglm models.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-102","dir":"Changelog","previous_headings":"","what":"ggeffects 1.0.2","title":"ggeffects 1.0.2","text":"CRAN release: 2021-03-17","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"breaking-changes-1-0-2","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"ggeffects 1.0.2","text":"residuals.type argument plot() deprecated. Always using \"working\" residuals.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-0-2","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.0.2","text":"pretty_range() values_at() can now also used function factories. plot() gains limit.range argument, limit range prediction bands range data.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-1-0-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 1.0.2","text":"Fixed issue unnecessary back-transformation log-transformed offset-terms glmmTMB models. Fixed issues plotting raw data predictor x-axis character vector. Fixed issues CRAN checks.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-101","dir":"Changelog","previous_headings":"","what":"ggeffects 1.0.1","title":"ggeffects 1.0.1","text":"CRAN release: 2020-12-14","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-0-1","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.0.1","text":"Fixed CRAN check issues. Added argument interval ggemmeans(), either compute confidence prediction intervals.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-100","dir":"Changelog","previous_headings":"","what":"ggeffects 1.0.0","title":"ggeffects 1.0.0","text":"CRAN release: 2020-11-29","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-supported-models-1-0-0","dir":"Changelog","previous_headings":"","what":"New supported models","title":"ggeffects 1.0.0","text":"averaging (package MuMIn)","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-functions-1-0-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"ggeffects 1.0.0","text":"pool_predictions(), pool multiple ggeffects objects. can used predicted values estimated marginal means calculated models fit multiple imputed datasets.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-0-0","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.0.0","text":"function residualize_over_grid() now exported. back-transformation response-variable (log- square root-transformed model) now also works square root-transformations correctly handles log1p() log(mu + x). Since standard errors link-scale back-transformed non-Gaussian models, now longer printed (avoid confusion standard errors link-scale predictions confidence intervals response-scale).","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 1.0.0","text":"Fixed issue mixed models predictions conditioned random effects variances (e.g. type = \"random\" \"zi_random\"), random effects variances calculated almost zero. Fixed issue confidence intervals multinom models ggemmeans(). Fixed issue ggemmeans() models nlme. Fixed issue plot() models ggeffect(). Fixed issue computation confidence intervals zero-inflated models offset-term.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-0160","dir":"Changelog","previous_headings":"","what":"ggeffects 0.16.0","title":"ggeffects 0.16.0","text":"CRAN release: 2020-09-13","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"breaking-changes-0-16-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"ggeffects 0.16.0","text":"Package insight since version 0.9.5 now returns “raw” (untransformed, .e. original) data used fit model also log-transformed variables. Thus, exponentiation like using terms = \"predictor [exp]\" longer necessary.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-supported-models-0-16-0","dir":"Changelog","previous_headings":"","what":"New supported models","title":"ggeffects 0.16.0","text":"mlogit (package mlogit)","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-0-16-0","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 0.16.0","text":"plot() now can also create partial residuals plots. , arguments residuals, residuals.type residuals.line added add partial residuals, type residuals possible loess-fit regression line residual data.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-0-16-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 0.16.0","text":"message models back-transformation response scale (non-Gaussian models), standard errors still link-scale, show models class glm since time. fixed now. Fixed issue ggpredict() rlmerMods models using factors adjusted terms. Fixed issue brms-multi-response models.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-0151","dir":"Changelog","previous_headings":"","what":"ggeffects 0.15.1","title":"ggeffects 0.15.1","text":"CRAN release: 2020-07-27","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-supported-models-0-15-1","dir":"Changelog","previous_headings":"","what":"New supported models","title":"ggeffects 0.15.1","text":"mclogit (package mclogit)","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-0-15-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 0.15.1","text":"Fixed issues due latest rstanarm update. Fixed issues around categorical/cumulative brms models outcome numeric. Fixed bug factor level ordering plotting raw data ggeffect().","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-0150","dir":"Changelog","previous_headings":"","what":"ggeffects 0.15.0","title":"ggeffects 0.15.0","text":"CRAN release: 2020-06-16","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"changes-to-functions-0-15-0","dir":"Changelog","previous_headings":"","what":"Changes to functions","title":"ggeffects 0.15.0","text":"ggpredict() gets new type-option, \"zi.prob\", predict zero-inflation probability (models pscl, glmmTMB GLMMadaptive). model log-transformed response variable add.data = TRUE plot(), raw data points also transformed accordingly. plot() add.data = TRUE first adds layer raw data, points / lines marginal effects, raw data points overlay predicted values. terms-argument now also accepts name variable define specific values. See vignette Marginal Effects Specific Values.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-0-15-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 0.15.0","text":"Fix issues cluster-robust variance-covariance estimation vcov.type specified.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-0143","dir":"Changelog","previous_headings":"","what":"ggeffects 0.14.3","title":"ggeffects 0.14.3","text":"CRAN release: 2020-04-20","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-0-14-3","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 0.14.3","text":"Fixed issues due changes CRAN packages.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-0142","dir":"Changelog","previous_headings":"","what":"ggeffects 0.14.2","title":"ggeffects 0.14.2","text":"CRAN release: 2020-03-14","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-0-14-2","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 0.14.2","text":"ggeffects now requires glmmTMB version 1.0.0 higher. Added human-readable alias-options type-argument.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-0-14-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 0.14.2","text":"Fixed issue log-transformed predictors held constant typical value negative. Fixed issue plotting raw data plot categorical predictor x-axis, numeric factor levels start 1. Fixed issues model objects used (log) transformed offset() terms.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-0141","dir":"Changelog","previous_headings":"","what":"ggeffects 0.14.1","title":"ggeffects 0.14.1","text":"CRAN release: 2020-01-28","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-0-14-1","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 0.14.1","text":"Reduce package dependencies. New package-vignette (Cluster) Robust Standard Errors.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-supported-models-0-14-1","dir":"Changelog","previous_headings":"","what":"New supported models","title":"ggeffects 0.14.1","text":"mixor (package mixor), cgam, cgamm (package cgam)","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-0-14-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 0.14.1","text":"Fix CRAN check issues due latest emmeans update.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-0140","dir":"Changelog","previous_headings":"","what":"ggeffects 0.14.0","title":"ggeffects 0.14.0","text":"CRAN release: 2019-12-16","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"breaking-changes-0-14-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"ggeffects 0.14.0","text":"argument x..factor considered less useful removed.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-supported-models-0-14-0","dir":"Changelog","previous_headings":"","what":"New supported models","title":"ggeffects 0.14.0","text":"fixest (package fixest), glmx (package glmx).","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-0-14-0","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 0.14.0","text":"Reduce package dependencies. plot(rawdata = TRUE) now also works objects ggemmeans(). ggpredict() now computes confidence intervals predictions geeglm models. brmsfit models trials() response variable, ggpredict() used choose median value trials response hold constant. Now, can use condition-argument hold number trials constant different values. Improve print().","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-0-14-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 0.14.0","text":"Fixed issue clmm-models, group factor random effects numeric. Raw data longer omitted plots grouping variable continuous added raw data doesn’t numerically match grouping levels (e.g., mean +/- one standard deviation). Fix CRAN check issues due latest geepack update.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-0130","dir":"Changelog","previous_headings":"","what":"ggeffects 0.13.0","title":"ggeffects 0.13.0","text":"CRAN release: 2019-11-08","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"breaking-changes-0-13-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"ggeffects 0.13.0","text":"use emm() discouraged, removed.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-supported-models-0-13-0","dir":"Changelog","previous_headings":"","what":"New supported models","title":"ggeffects 0.13.0","text":"bracl, brmultinom (package brglm2) models packages bamlss R2BayesX.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-0-13-0","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 0.13.0","text":"Updated package dependencies. plot() now uses dodge-position raw data categorical x-axis, align raw data points points error bars geoms predictions. Updated re-arranged internal color palette, especially better behaviour selecting colors continuous palettes (see show_pals()).","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-functions-0-13-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"ggeffects 0.13.0","text":"Added vcov() function calculate variance-covariance matrix marginal effects.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"changes-to-functions-0-13-0","dir":"Changelog","previous_headings":"","what":"Changes to Functions","title":"ggeffects 0.13.0","text":"ggemmeans() now also accepts type = \"re\" type = \"re.zi\", add random effects variances prediction intervals mixed models. ellipses-argument ... now passed predict()-method gamlss-objects, predictions can computed sigma, nu tau well.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-0-13-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 0.13.0","text":"Fixed issue wrong order plot x-axis ggeffect(), one term character vector.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-0120","dir":"Changelog","previous_headings":"","what":"ggeffects 0.12.0","title":"ggeffects 0.12.0","text":"CRAN release: 2019-09-03","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"breaking-changes-0-12-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"ggeffects 0.12.0","text":"use ggaverage() discouraged, removed. name rprs_values() now deprecated, function named values_at(), alias representative_values(). x..factor-argument defaults TRUE.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-0-12-0","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 0.12.0","text":"ggpredict() now supports cumulative link ordinal vglm models package VGAM. informative error message clmm-models terms included random effects. add.data alias rawdata-argument plot(). ggpredict() ggemmeans() now also support predictions gam models ziplss family.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"changes-to-functions-0-12-0","dir":"Changelog","previous_headings":"","what":"Changes to Functions","title":"ggeffects 0.12.0","text":"Improved print()-method ordinal cumulative link models. plot()-method longer changes order factor levels groups facets. pretty_data() gets length() argument define length intervals returned.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-0-12-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 0.12.0","text":"Added “population level” output print-method lme objects. Fixed issue correct identification gamm/gamm4 models. Fixed issue weighted regression models brms. Fixed broken tests due changes forthcoming effects update.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-0110","dir":"Changelog","previous_headings":"","what":"ggeffects 0.11.0","title":"ggeffects 0.11.0","text":"CRAN release: 2019-07-01","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-0-11-0","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 0.11.0","text":"Revised docs vignettes - use term average marginal effects replaced less misleading wording, since functions ggeffects calculate marginal effects mean representative values, average marginal effects. Replace references internal vignettes docstrings website-vignettes, links website longer broken. values_at() alias rprs_values().","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-supported-models-0-11-0","dir":"Changelog","previous_headings":"","what":"New supported models","title":"ggeffects 0.11.0","text":"betabin, negbin (package aod), wbm (package panelr)","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"changes-to-functions-0-11-0","dir":"Changelog","previous_headings":"","what":"Changes to functions","title":"ggeffects 0.11.0","text":"ggpredict() now supports prediction intervals models MCMCglmm. ggpredict() gets back.transform-argument, tranform predicted values log-transformed responses back original scale (default behaviour), allow predictions remain log-scale (new). ggpredict() ggemmeans() now can calculate marginal effects specific values three terms (.e. terms can lenght four now). ci.style-argument plot() now also applies error bars categorical variables x-axis.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-0-11-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 0.11.0","text":"Fixed issue glmmTMB models included model weights.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-0100","dir":"Changelog","previous_headings":"","what":"ggeffects 0.10.0","title":"ggeffects 0.10.0","text":"CRAN release: 2019-05-13","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-0-10-0","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 0.10.0","text":"Better support, including confidence intervals, already supported model types. New package-vignette Logistic Mixed Effects Model Interaction Term.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-supported-models-0-10-0","dir":"Changelog","previous_headings":"","what":"New supported models","title":"ggeffects 0.10.0","text":"gamlss, geeglm (package geepack), lmrob glmrob (package robustbase), ols (package rms), rlmer (package robustlmm), rq rqss (package quantreg), tobit (package AER), survreg (package survival)","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"changes-to-functions-0-10-0","dir":"Changelog","previous_headings":"","what":"Changes to functions","title":"ggeffects 0.10.0","text":"steps specifying range values (e.g. terms = \"predictor [1:10]\") can now changed , e.g. terms = \"predictor [1:10 =.5]\" (see also vignette Marginal Effects Specific Values). Robust standard errors predictions (see argument vcov.fun ggpredict()) now also works following model-objects: coxph, plm, polr (probably also lme gls, tested yet). ggpredict() gets interval-argument, compute prediction intervals instead confidence intervals. plot.ggeffects() now allows different horizontal vertical jittering rawdata jitter numeric vector length two.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-0-10-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 0.10.0","text":"Models AsIs-conversion division two variables dependent variable, e.g. (amount/frequency), now work. ggpredict() failed MixMod-objects ci.lvl=NA.","code":""}]
